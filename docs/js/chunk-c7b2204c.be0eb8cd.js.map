{"version":3,"sources":["webpack:///./node_modules/gridstack/dist/gridstack-dd.js","webpack:///./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","webpack:///./node_modules/gridstack/dist/h5/dd-manager.js","webpack:///./node_modules/gridstack/dist/gridstack-ddi.js","webpack:///./src/js/api/widgetApi.js","webpack:///./node_modules/regenerator-runtime/runtime.js","webpack:///./node_modules/gridstack/dist/h5/dd-resizable-handle.js","webpack:///./node_modules/gridstack/dist/h5/dd-resizable.js","webpack:///./node_modules/gridstack/dist/utils.js","webpack:///./node_modules/gridstack/dist/h5/gridstack-dd-native.js","webpack:///./node_modules/gridstack/dist/h5/dd-element.js","webpack:///./node_modules/gridstack/dist/h5/dd-draggable.js","webpack:///./node_modules/gridstack/dist/h5/dd-droppable.js","webpack:///./node_modules/gridstack/dist/gridstack-engine.js","webpack:///./node_modules/gridstack/dist/h5/dd-base-impl.js","webpack:///./node_modules/gridstack/dist/h5/dd-utils.js","webpack:///./node_modules/gridstack/dist/gridstack.js","webpack:///./node_modules/gridstack/dist/types.js"],"names":["Object","defineProperty","exports","value","GridStackDD","gridstack_ddi_1","gridstack_1","utils_1","GridStackDDI","get","el","this","draggable","resizable","gridstackNode","_initDD","_itemRemoving","remove","node","undefined","grid","_isAboutToRemove","classList","add","GridStack","prototype","_setupAcceptWidget","opts","staticGrid","acceptWidgets","removable","droppable","cellHeight","cellWidth","onDrag","event","helper","parent","getBoundingClientRect","top","left","ui","position","_temporaryRemoved","x","Math","max","round","y","autoPosition","engine","nodeBoundFix","willItFit","off","_willFitPos","Utils","copyPos","_onStartMoving","_dragOrResize","accept","subGrid","canAccept","selector","matches","maxRow","n","w","h","minW","minH","on","otherGrid","_leave","getCellHeight","_readAttr","_isExternal","offsetWidth","offsetHeight","_gridstackNodeOrig","assign","cleanupNode","wasAdded","placeholder","parentElement","origNode","oGrid","removedNodes","push","_triggerRemoveEvent","cloneNode","removePositioningStyles","_writeAttr","appendChild","_updateContainerHeight","addedNodes","_triggerAddEvent","_triggerChangeEvent","endUpdate","_gsEventHandler","type","window","setTimeout","_prepareDragDropByNode","removeNode","_setupRemoveDrop","trashEl","document","querySelector","isDroppable","removableOptions","setupDragIn","_dragIn","_dragInOptions","dragIn","dragInOptions","dragInDefaultOptions","revert","handle","scroll","appendTo","dd","getElements","forEach","isDraggable","noMove","disableDrag","noResize","disableResize","onStartMoving","target","dragOrResize","onEndMoving","_moving","_lastTried","gridToNotify","_orig","_writePosAttr","addNode","_extraDragRow","start","stop","drag","resize","cleanNodes","beginUpdate","_lastUiPosition","_prevYPix","cacheRects","marginTop","marginRight","marginBottom","marginLeft","maxW","maxH","restoreInitial","resizing","p","mLeft","mRight","mTop","mBottom","mHeight","mWidth","min","distance","updateScrollPosition","prev","collide","row","getRow","extra","updateScrollResize","size","width","height","rect","moveNodeCheck","_skipDown","onParentResize","movable","els","val","disable","enableMove","enableResize","_triggerEvent","enable","doEnable","nodes","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","DDManager","pluginClass","ddi","registerPlugin","widgetList","request","$api","catch","e","console","widgetModify","id","patch","runtime","Op","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","enumerable","configurable","writable","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","makeInvokeMethod","tryCatch","call","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","method","AsyncIterator","PromiseImpl","invoke","record","result","__await","unwrapped","previousPromise","enqueue","callInvokeWithMethodAndArg","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","object","reverse","pop","skipTempReset","charAt","slice","rootEntry","rootRecord","rval","exception","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","Function","DDResizableHandle","host","direction","option","moving","dir","_mouseDown","bind","_mouseMove","_mouseUp","_init","createElement","prefix","style","zIndex","userSelect","addEventListener","mouseDownEvent","removeEventListener","removeChild","preventDefault","s","abs","DDResizable","dd_resizable_handle_1","dd_base_impl_1","dd_utils_1","DDBaseImplement","super","_showHandlers","_hideHandlers","_ui","containmentEl","containmentRect","newRect","originalRect","scrolled","temporalRect","_setupAutoHide","_setupHandlers","callback","_removeHandlers","autoHide","destroy","updateHandles","handles","updateAutoHide","handlerDirection","handlers","split","map","trim","_resizeStart","_resizeStop","move","_resizing","scrollEl","getScrollElement","scrollY","scrollTop","startEvent","_setupHelper","_applyChange","ev","DDUtils","initEvent","triggerEvent","_getChange","_cleanHelper","elOriginStyleVal","_originStyleProp","prop","parentOriginStylePosition","getComputedStyle","match","opacity","oEvent","offsetX","clientX","offsetY","clientY","indexOf","constrain","_constrainSize","oWidth","oHeight","maxWidth","Number","MAX_SAFE_INTEGER","minWidth","maxHeight","minHeight","obsolete","f","oldName","newName","rev","wrapper","warn","obsoleteOpts","obsoleteOptsDel","obsoleteAttr","oldAttr","getAttribute","setAttribute","list","querySelectorAll","Array","from","getElementById","substring","a","b","isIntercepted","column","reduce","col","sort","styleSheet","cssText","createTextNode","insertBefore","firstChild","getElementsByTagName","sheet","parentNode","rules","addRule","insertRule","v","toLowerCase","Boolean","unit","parseFloat","sources","source","defaults","minMax","contains","func","delay","isWaiting","removeProperty","scrollingElement","documentElement","overflowRegex","test","overflow","overflowY","innerHeightOrClientHeight","innerHeight","clientHeight","bottom","offsetDiffDown","offsetDiffUp","prevScroll","offsetTop","pointerPosY","scrollBy","behavior","ret","clone","skipFields","find","k","cloneDeep","__createBinding","o","m","k2","__exportStar","GridStackDDNative","dd_manager_1","dd_element_1","gridstack_dd_1","_getDDElements","dEl","ddResizable","cleanResizable","setupResizable","ddDraggable","cleanDraggable","setupDraggable","containment","_isNested","dragOut","_accept","ddDroppable","cleanDroppable","setupDroppable","ddElement","disabled","dragElement","hosts","DDElement","init","filter","d","dd_resizable_1","dd_draggable_1","dd_droppable_1","eventName","updateOption","DDDraggable","DDDroppable","dragging","offset","className","dragEl","_dragStart","_drag","_dragEnd","forDestroy","removeAttribute","_createHelper","_setupHelperContainmentStyle","dragOffset","_getDragOffset","helperContainment","_setupDragFollowNodeNotifyStart","_dragFollow","dragFollowTimer","_cancelDragGhost","_setupHelperStyle","dragEventListenerOption","clearTimeout","paintTimer","cancelAnimationFrame","_removeHelperStyle","body","dragElementOriginStyle","originStyleProp","rec","pointerEvents","willChange","transition","requestAnimationFrame","offsetLeft","img","dataTransfer","setDragImage","stopPropagation","xformOffsetX","xformOffsetY","testEl","addElStyles","testElPosition","targetOffset","_dragEnter","_dragOver","_dragLeave","_drop","_setupAccept","_removeLeaveCallbacks","_canDrop","over","lastActive","forceLeave","_a","onChild","inside","nestedEl","gridstack","some","out","drop","GridStackEngine","onChange","_float","float","batchMode","_prevFloat","saveInitial","_packNodes","_notify","nn","_hasLocked","opt","_sortNodes","nested","swap","area","_useEntireRowArea","skip","didMove","newOpt","pack","moved","locked","moveNode","skip2","collides","_rect","r0","r","r2","yOver","MAX_VALUE","xOver","overMax","right","_doSwap","_dirty","touching","isTouching","t","batchUpdate","copyNodes","commit","_updating","newY","canBeMoved","_id","_idSeq","before","_inColumnResize","cacheOneLayout","samePos","verify","removeDOM","isArray","dirtyNodes","concat","getDirtyNodes","triggerAddEvent","dup","prepareNode","_removeDOM","floor","box","_fixCollisions","_layouts","changedPosConstrain","clonedNode","canMove","c","content","prevPos","collideAll","needToMove","collideCoverage","saveElement","len","layout","wl","l","ratio","prevColumn","cacheLayout","newNodes","domOrder","cacheNodes","lastIndex","cacheNode","j","findIndex","splice","scale","clear","copy","index","_disabled","_eventRegister","styles","evt","button","which","buttons","bubbles","cancelable","relatedTarget","fromElement","isEventSupportPassiveOption","supportsPassive","passiveTest","gridstack_engine_1","GridDefaults","minRow","itemClass","placeholderClass","placeholderText","handleClass","styleInHead","cellHeightThrottle","margin","auto","animate","alwaysShowResizeHandle","rtl","marginUnit","cellHeightUnit","disableOneColumnMode","oneColumnModeDomSort","rowAttr","toNumber","toBool","_styleSheetClass","random","toFixed","initMargin","_widthOrContainer","_prevColumn","getColumn","parentGridItemEl","closestByClass","_isAutoCellHeight","_setStaticClass","cbNodes","_updateStyles","elements","getGridItems","parseInt","_prepareElement","setAnimation","_updateWindowResizeEvent","options","elOrString","getGridElement","grids","getGridElements","doc","implementation","createHTMLDocument","innerHTML","class","children","load","_placeholder","placeholderChild","addWidget","isGridStackWidget","domAttr","_insertNotAppend","prepend","autoColumn","ops","addGrid","_autoColumn","saveContent","saveGridOpt","save","sub","removeInternalAndSame","addAndRemove","items","_ignoreLayoutsNodeChange","removed","item","removeWidget","update","forcePixel","rows","marginDiff","data","parseHeight","clientWidth","innerWidth","compact","domNodes","oldColumn","updateNodeWidths","setStatic","removeAll","_removeStylesheet","useDocRelative","containerPos","relativeLeft","relativeTop","columnWidth","rowHeight","isAreaEmpty","getElement","names","noData","detail","log","doAnimate","updateClass","changed","ddChanged","isMultiValue","layoutsNodesChange","CustomEvent","Event","dispatchEvent","_styles","removeStylesheet","forceUpdate","styleLocation","createStylesheet","_max","addCSSRule","getHeight","String","same","attrs","resizeHandles","classes","changedColumn","oneColumn","_cellHeightThrottle","throttle","forceRemove","workTodo","_windowResizeBind","margins","Engine"],"mappings":"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","file":"js/chunk-c7b2204c.be0eb8cd.js","sourcesContent":["\"use strict\";\r\n/**\r\n * gridstack-dd.ts 5.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GridStackDD = void 0;\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nconst gridstack_ddi_1 = require(\"./gridstack-ddi\");\r\nconst gridstack_1 = require(\"./gridstack\");\r\nconst utils_1 = require(\"./utils\");\r\n// TEST let count = 0;\r\n/**\r\n * Base class implementing common Grid drag'n'drop functionality, with domain specific subclass (h5 vs jq subclasses)\r\n */\r\nclass GridStackDD extends gridstack_ddi_1.GridStackDDI {\r\n    /** override to cast to correct type */\r\n    static get() {\r\n        return gridstack_ddi_1.GridStackDDI.get();\r\n    }\r\n    /** removes any drag&drop present (called during destroy) */\r\n    remove(el) {\r\n        this.draggable(el, 'destroy').resizable(el, 'destroy');\r\n        if (el.gridstackNode) {\r\n            delete el.gridstackNode._initDD; // reset our DD init flag\r\n        }\r\n        return this;\r\n    }\r\n}\r\nexports.GridStackDD = GridStackDD;\r\n/********************************************************************************\r\n * GridStack code that is doing drag&drop extracted here so main class is smaller\r\n * for static grid that don't do any of this work anyway. Saves about 10k.\r\n * https://www.typescriptlang.org/docs/handbook/declaration-merging.html\r\n * https://www.typescriptlang.org/docs/handbook/mixins.html\r\n ********************************************************************************/\r\n/** @internal called to add drag over to support widgets being added externally */\r\ngridstack_1.GridStack.prototype._setupAcceptWidget = function () {\r\n    // check if we need to disable things\r\n    if (this.opts.staticGrid || (!this.opts.acceptWidgets && !this.opts.removable)) {\r\n        GridStackDD.get().droppable(this.el, 'destroy');\r\n        return this;\r\n    }\r\n    // vars shared across all methods\r\n    let cellHeight, cellWidth;\r\n    let onDrag = (event, el, helper) => {\r\n        let node = el.gridstackNode;\r\n        if (!node)\r\n            return;\r\n        helper = helper || el;\r\n        let parent = this.el.getBoundingClientRect();\r\n        let { top, left } = helper.getBoundingClientRect();\r\n        left -= parent.left;\r\n        top -= parent.top;\r\n        let ui = { position: { top, left } };\r\n        if (node._temporaryRemoved) {\r\n            node.x = Math.max(0, Math.round(left / cellWidth));\r\n            node.y = Math.max(0, Math.round(top / cellHeight));\r\n            delete node.autoPosition;\r\n            this.engine.nodeBoundFix(node);\r\n            // don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere\r\n            if (!this.engine.willItFit(node)) {\r\n                node.autoPosition = true; // ignore x,y and try for any slot...\r\n                if (!this.engine.willItFit(node)) {\r\n                    GridStackDD.get().off(el, 'drag'); // stop calling us\r\n                    return; // full grid or can't grow\r\n                }\r\n                if (node._willFitPos) {\r\n                    // use the auto position instead #1687\r\n                    utils_1.Utils.copyPos(node, node._willFitPos);\r\n                    delete node._willFitPos;\r\n                }\r\n            }\r\n            // re-use the existing node dragging method\r\n            this._onStartMoving(helper, event, ui, node, cellWidth, cellHeight);\r\n        }\r\n        else {\r\n            // re-use the existing node dragging that does so much of the collision detection\r\n            this._dragOrResize(helper, event, ui, node, cellWidth, cellHeight);\r\n        }\r\n    };\r\n    GridStackDD.get()\r\n        .droppable(this.el, {\r\n        accept: (el) => {\r\n            let node = el.gridstackNode;\r\n            // set accept drop to true on ourself (which we ignore) so we don't get \"can't drop\" icon in HTML5 mode while moving\r\n            if ((node === null || node === void 0 ? void 0 : node.grid) === this)\r\n                return true;\r\n            if (!this.opts.acceptWidgets)\r\n                return false;\r\n            // prevent deeper nesting until rest of 992 can be fixed\r\n            if (node === null || node === void 0 ? void 0 : node.subGrid)\r\n                return false;\r\n            // check for accept method or class matching\r\n            let canAccept = true;\r\n            if (typeof this.opts.acceptWidgets === 'function') {\r\n                canAccept = this.opts.acceptWidgets(el);\r\n            }\r\n            else {\r\n                let selector = (this.opts.acceptWidgets === true ? '.grid-stack-item' : this.opts.acceptWidgets);\r\n                canAccept = el.matches(selector);\r\n            }\r\n            // finally check to make sure we actually have space left #1571\r\n            if (canAccept && node && this.opts.maxRow) {\r\n                let n = { w: node.w, h: node.h, minW: node.minW, minH: node.minH }; // only width/height matters and autoPosition\r\n                canAccept = this.engine.willItFit(n);\r\n            }\r\n            return canAccept;\r\n        }\r\n    })\r\n        /**\r\n         * entering our grid area\r\n         */\r\n        .on(this.el, 'dropover', (event, el, helper) => {\r\n        // TEST console.log(`over ${this.el.gridstack.opts.id} ${count++}`);\r\n        let node = el.gridstackNode;\r\n        // ignore drop enter on ourself (unless we temporarily removed) which happens on a simple drag of our item\r\n        if ((node === null || node === void 0 ? void 0 : node.grid) === this && !node._temporaryRemoved) {\r\n            // delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)\r\n            return false; // prevent parent from receiving msg (which may be a grid as well)\r\n        }\r\n        // fix #1578 when dragging fast, we may not get a leave on the previous grid so force one now\r\n        if ((node === null || node === void 0 ? void 0 : node.grid) && node.grid !== this && !node._temporaryRemoved) {\r\n            // TEST console.log('dropover without leave');\r\n            let otherGrid = node.grid;\r\n            otherGrid._leave(el, helper);\r\n        }\r\n        // cache cell dimensions (which don't change), position can animate if we removed an item in otherGrid that affects us...\r\n        cellWidth = this.cellWidth();\r\n        cellHeight = this.getCellHeight(true);\r\n        // load any element attributes if we don't have a node\r\n        if (!node) { // @ts-ignore private read only on ourself\r\n            node = this._readAttr(el);\r\n        }\r\n        if (!node.grid) {\r\n            node._isExternal = true;\r\n            el.gridstackNode = node;\r\n        }\r\n        // calculate the grid size based on element outer size\r\n        helper = helper || el;\r\n        let w = node.w || Math.round(helper.offsetWidth / cellWidth) || 1;\r\n        let h = node.h || Math.round(helper.offsetHeight / cellHeight) || 1;\r\n        // if the item came from another grid, make a copy and save the original info in case we go back there\r\n        if (node.grid && node.grid !== this) {\r\n            // copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific\r\n            // TEST console.log('dropover cloning node');\r\n            if (!el._gridstackNodeOrig)\r\n                el._gridstackNodeOrig = node; // shouldn't have multiple nested!\r\n            el.gridstackNode = node = Object.assign(Object.assign({}, node), { w, h, grid: this });\r\n            this.engine.cleanupNode(node)\r\n                .nodeBoundFix(node);\r\n            // restore some internal fields we need after clearing them all\r\n            node._initDD =\r\n                node._isExternal = // DOM needs to be re-parented on a drop\r\n                    node._temporaryRemoved = true; // so it can be inserted onDrag below\r\n        }\r\n        else {\r\n            node.w = w;\r\n            node.h = h;\r\n            node._temporaryRemoved = true; // so we can insert it\r\n        }\r\n        // clear any marked for complete removal (Note: don't check _isAboutToRemove as that is cleared above - just do it)\r\n        _itemRemoving(node.el, false);\r\n        GridStackDD.get().on(el, 'drag', onDrag);\r\n        // make sure this is called at least once when going fast #1578\r\n        onDrag(event, el, helper);\r\n        return false; // prevent parent from receiving msg (which may be a grid as well)\r\n    })\r\n        /**\r\n         * Leaving our grid area...\r\n         */\r\n        .on(this.el, 'dropout', (event, el, helper) => {\r\n        // TEST console.log(`out ${this.el.gridstack.opts.id} ${count++}`);\r\n        let node = el.gridstackNode;\r\n        if (!node)\r\n            return false;\r\n        // fix #1578 when dragging fast, we might get leave after other grid gets enter (which calls us to clean)\r\n        // so skip this one if we're not the active grid really..\r\n        if (!node.grid || node.grid === this) {\r\n            this._leave(el, helper);\r\n        }\r\n        return false; // prevent parent from receiving msg (which may be grid as well)\r\n    })\r\n        /**\r\n         * end - releasing the mouse\r\n         */\r\n        .on(this.el, 'drop', (event, el, helper) => {\r\n        let node = el.gridstackNode;\r\n        // ignore drop on ourself from ourself that didn't come from the outside - dragend will handle the simple move instead\r\n        if ((node === null || node === void 0 ? void 0 : node.grid) === this && !node._isExternal)\r\n            return false;\r\n        let wasAdded = !!this.placeholder.parentElement; // skip items not actually added to us because of constrains, but do cleanup #1419\r\n        this.placeholder.remove();\r\n        // notify previous grid of removal\r\n        // TEST console.log('drop delete _gridstackNodeOrig')\r\n        let origNode = el._gridstackNodeOrig;\r\n        delete el._gridstackNodeOrig;\r\n        if (wasAdded && origNode && origNode.grid && origNode.grid !== this) {\r\n            let oGrid = origNode.grid;\r\n            oGrid.engine.removedNodes.push(origNode);\r\n            oGrid._triggerRemoveEvent();\r\n        }\r\n        if (!node)\r\n            return false;\r\n        // use existing placeholder node as it's already in our list with drop location\r\n        if (wasAdded) {\r\n            this.engine.cleanupNode(node); // removes all internal _xyz values\r\n            node.grid = this;\r\n        }\r\n        GridStackDD.get().off(el, 'drag');\r\n        // if we made a copy ('helper' which is temp) of the original node then insert a copy, else we move the original node (#1102)\r\n        // as the helper will be nuked by jquery-ui otherwise\r\n        if (helper !== el) {\r\n            helper.remove();\r\n            el.gridstackNode = origNode; // original item (left behind) is re-stored to pre dragging as the node now has drop info\r\n            if (wasAdded) {\r\n                el = el.cloneNode(true);\r\n            }\r\n        }\r\n        else {\r\n            el.remove(); // reduce flicker as we change depth here, and size further down\r\n            GridStackDD.get().remove(el);\r\n        }\r\n        if (!wasAdded)\r\n            return false;\r\n        el.gridstackNode = node;\r\n        node.el = el;\r\n        // @ts-ignore\r\n        utils_1.Utils.copyPos(node, this._readAttr(this.placeholder)); // placeholder values as moving VERY fast can throw things off #1578\r\n        utils_1.Utils.removePositioningStyles(el); // @ts-ignore\r\n        this._writeAttr(el, node);\r\n        this.el.appendChild(el); // @ts-ignore\r\n        this._updateContainerHeight();\r\n        this.engine.addedNodes.push(node); // @ts-ignore\r\n        this._triggerAddEvent(); // @ts-ignore\r\n        this._triggerChangeEvent();\r\n        this.engine.endUpdate();\r\n        if (this._gsEventHandler['dropped']) {\r\n            this._gsEventHandler['dropped'](Object.assign(Object.assign({}, event), { type: 'dropped' }), origNode && origNode.grid ? origNode : undefined, node);\r\n        }\r\n        // wait till we return out of the drag callback to set the new drag&resize handler or they may get messed up\r\n        window.setTimeout(() => {\r\n            // IFF we are still there (some application will use as placeholder and insert their real widget instead and better call makeWidget())\r\n            if (node.el && node.el.parentElement) {\r\n                this._prepareDragDropByNode(node);\r\n            }\r\n            else {\r\n                this.engine.removeNode(node);\r\n            }\r\n        });\r\n        return false; // prevent parent from receiving msg (which may be grid as well)\r\n    });\r\n    return this;\r\n};\r\n/** @internal mark item for removal */\r\nfunction _itemRemoving(el, remove) {\r\n    let node = el ? el.gridstackNode : undefined;\r\n    if (!node || !node.grid)\r\n        return;\r\n    remove ? node._isAboutToRemove = true : delete node._isAboutToRemove;\r\n    remove ? el.classList.add('grid-stack-item-removing') : el.classList.remove('grid-stack-item-removing');\r\n}\r\n/** @internal called to setup a trash drop zone if the user specifies it */\r\ngridstack_1.GridStack.prototype._setupRemoveDrop = function () {\r\n    if (!this.opts.staticGrid && typeof this.opts.removable === 'string') {\r\n        let trashEl = document.querySelector(this.opts.removable);\r\n        if (!trashEl)\r\n            return this;\r\n        // only register ONE drop-over/dropout callback for the 'trash', and it will\r\n        // update the passed in item and parent grid because the 'trash' is a shared resource anyway,\r\n        // and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)\r\n        if (!GridStackDD.get().isDroppable(trashEl)) {\r\n            GridStackDD.get().droppable(trashEl, this.opts.removableOptions)\r\n                .on(trashEl, 'dropover', (event, el) => _itemRemoving(el, true))\r\n                .on(trashEl, 'dropout', (event, el) => _itemRemoving(el, false));\r\n        }\r\n    }\r\n    return this;\r\n};\r\n/**\r\n * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n * Called during GridStack.init() as options, but can also be called directly (last param are cached) in case the toolbar\r\n * is dynamically create and needs to change later.\r\n **/\r\ngridstack_1.GridStack.setupDragIn = function (_dragIn, _dragInOptions) {\r\n    let dragIn;\r\n    let dragInOptions;\r\n    const dragInDefaultOptions = {\r\n        revert: 'invalid',\r\n        handle: '.grid-stack-item-content',\r\n        scroll: false,\r\n        appendTo: 'body'\r\n    };\r\n    // cache in the passed in values (form grid init?) so they don't have to resend them each time\r\n    if (_dragIn) {\r\n        dragIn = _dragIn;\r\n        dragInOptions = Object.assign(Object.assign({}, dragInDefaultOptions), (_dragInOptions || {}));\r\n    }\r\n    if (typeof dragIn !== 'string')\r\n        return;\r\n    let dd = GridStackDD.get();\r\n    utils_1.Utils.getElements(dragIn).forEach(el => {\r\n        if (!dd.isDraggable(el))\r\n            dd.dragIn(el, dragInOptions);\r\n    });\r\n};\r\n/** @internal prepares the element for drag&drop **/\r\ngridstack_1.GridStack.prototype._prepareDragDropByNode = function (node) {\r\n    let el = node.el;\r\n    let dd = GridStackDD.get();\r\n    // check for disabled grid first\r\n    if (this.opts.staticGrid || ((node.noMove || this.opts.disableDrag) && (node.noResize || this.opts.disableResize))) {\r\n        if (node._initDD) {\r\n            dd.remove(el); // nukes everything instead of just disable, will add some styles back next\r\n            delete node._initDD;\r\n        }\r\n        el.classList.add('ui-draggable-disabled', 'ui-resizable-disabled'); // add styles one might depend on #1435\r\n        return this;\r\n    }\r\n    if (!node._initDD) {\r\n        // variables used/cashed between the 3 start/move/end methods, in addition to node passed above\r\n        let cellWidth;\r\n        let cellHeight;\r\n        /** called when item starts moving/resizing */\r\n        let onStartMoving = (event, ui) => {\r\n            // trigger any 'dragstart' / 'resizestart' manually\r\n            if (this._gsEventHandler[event.type]) {\r\n                this._gsEventHandler[event.type](event, event.target);\r\n            }\r\n            cellWidth = this.cellWidth();\r\n            cellHeight = this.getCellHeight(true); // force pixels for calculations\r\n            this._onStartMoving(el, event, ui, node, cellWidth, cellHeight);\r\n        };\r\n        /** called when item is being dragged/resized */\r\n        let dragOrResize = (event, ui) => {\r\n            this._dragOrResize(el, event, ui, node, cellWidth, cellHeight);\r\n        };\r\n        /** called when the item stops moving/resizing */\r\n        let onEndMoving = (event) => {\r\n            this.placeholder.remove();\r\n            delete node._moving;\r\n            delete node._lastTried;\r\n            // if the item has moved to another grid, we're done here\r\n            let target = event.target;\r\n            if (!target.gridstackNode || target.gridstackNode.grid !== this)\r\n                return;\r\n            node.el = target;\r\n            if (node._isAboutToRemove) {\r\n                let gridToNotify = el.gridstackNode.grid;\r\n                if (gridToNotify._gsEventHandler[event.type]) {\r\n                    gridToNotify._gsEventHandler[event.type](event, target);\r\n                }\r\n                dd.remove(el);\r\n                gridToNotify.engine.removedNodes.push(node);\r\n                gridToNotify._triggerRemoveEvent();\r\n                // break circular links and remove DOM\r\n                delete el.gridstackNode;\r\n                delete node.el;\r\n                el.remove();\r\n            }\r\n            else {\r\n                if (!node._temporaryRemoved) {\r\n                    // move to new placeholder location\r\n                    utils_1.Utils.removePositioningStyles(target); // @ts-ignore\r\n                    this._writePosAttr(target, node);\r\n                }\r\n                else {\r\n                    // got removed - restore item back to before dragging position\r\n                    utils_1.Utils.removePositioningStyles(target);\r\n                    utils_1.Utils.copyPos(node, node._orig); // @ts-ignore\r\n                    this._writePosAttr(target, node);\r\n                    this.engine.addNode(node);\r\n                }\r\n                if (this._gsEventHandler[event.type]) {\r\n                    this._gsEventHandler[event.type](event, target);\r\n                }\r\n            }\r\n            // @ts-ignore\r\n            this._extraDragRow = 0; // @ts-ignore\r\n            this._updateContainerHeight(); // @ts-ignore\r\n            this._triggerChangeEvent();\r\n            this.engine.endUpdate();\r\n        };\r\n        dd.draggable(el, {\r\n            start: onStartMoving,\r\n            stop: onEndMoving,\r\n            drag: dragOrResize\r\n        }).resizable(el, {\r\n            start: onStartMoving,\r\n            stop: onEndMoving,\r\n            resize: dragOrResize\r\n        });\r\n        node._initDD = true; // we've set DD support now\r\n    }\r\n    // finally fine tune move vs resize by disabling any part...\r\n    if (node.noMove || this.opts.disableDrag) {\r\n        dd.draggable(el, 'disable');\r\n        el.classList.add('ui-draggable-disabled');\r\n    }\r\n    else {\r\n        dd.draggable(el, 'enable');\r\n        el.classList.remove('ui-draggable-disabled');\r\n    }\r\n    if (node.noResize || this.opts.disableResize) {\r\n        dd.resizable(el, 'disable');\r\n        el.classList.add('ui-resizable-disabled');\r\n    }\r\n    else {\r\n        dd.resizable(el, 'enable');\r\n        el.classList.remove('ui-resizable-disabled');\r\n    }\r\n    return this;\r\n};\r\n/** @internal called when item is starting a drag/resize */\r\ngridstack_1.GridStack.prototype._onStartMoving = function (el, event, ui, node, cellWidth, cellHeight) {\r\n    this.engine.cleanNodes()\r\n        .beginUpdate(node);\r\n    // @ts-ignore\r\n    this._writePosAttr(this.placeholder, node);\r\n    this.el.appendChild(this.placeholder);\r\n    // TEST console.log('_onStartMoving placeholder')\r\n    node.el = this.placeholder;\r\n    node._lastUiPosition = ui.position;\r\n    node._prevYPix = ui.position.top;\r\n    node._moving = (event.type === 'dragstart'); // 'dropover' are not initially moving so they can go exactly where they enter (will push stuff out of the way)\r\n    delete node._lastTried;\r\n    if (event.type === 'dropover' && node._temporaryRemoved) {\r\n        // TEST console.log('engine.addNode x=' + node.x);\r\n        this.engine.addNode(node); // will add, fix collisions, update attr and clear _temporaryRemoved\r\n        node._moving = true; // AFTER, mark as moving object (wanted fix location before)\r\n    }\r\n    // set the min/max resize info\r\n    this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop, this.opts.marginRight, this.opts.marginBottom, this.opts.marginLeft);\r\n    if (event.type === 'resizestart') {\r\n        let dd = GridStackDD.get()\r\n            .resizable(el, 'option', 'minWidth', cellWidth * (node.minW || 1))\r\n            .resizable(el, 'option', 'minHeight', cellHeight * (node.minH || 1));\r\n        if (node.maxW) {\r\n            dd.resizable(el, 'option', 'maxWidth', cellWidth * node.maxW);\r\n        }\r\n        if (node.maxH) {\r\n            dd.resizable(el, 'option', 'maxHeight', cellHeight * node.maxH);\r\n        }\r\n    }\r\n};\r\n/** @internal called when item leaving our area by either cursor dropout event\r\n * or shape is outside our boundaries. remove it from us, and mark temporary if this was\r\n * our item to start with else restore prev node values from prev grid it came from.\r\n **/\r\ngridstack_1.GridStack.prototype._leave = function (el, helper) {\r\n    let node = el.gridstackNode;\r\n    if (!node)\r\n        return;\r\n    GridStackDD.get().off(el, 'drag'); // no need to track while being outside\r\n    // this gets called when cursor leaves and shape is outside, so only do this once\r\n    if (node._temporaryRemoved)\r\n        return;\r\n    node._temporaryRemoved = true;\r\n    this.engine.removeNode(node); // remove placeholder as well, otherwise it's a sign node is not in our list, which is a bigger issue\r\n    node.el = node._isExternal && helper ? helper : el; // point back to real item being dragged\r\n    if (this.opts.removable === true) { // boolean vs a class string\r\n        // item leaving us and we are supposed to remove on leave (no need to drag onto trash) mark it so\r\n        _itemRemoving(el, true);\r\n    }\r\n    // finally if item originally came from another grid, but left us, restore things back to prev info\r\n    if (el._gridstackNodeOrig) {\r\n        // TEST console.log('leave delete _gridstackNodeOrig')\r\n        el.gridstackNode = el._gridstackNodeOrig;\r\n        delete el._gridstackNodeOrig;\r\n    }\r\n    else if (node._isExternal) {\r\n        // item came from outside (like a toolbar) so nuke any node info\r\n        delete node.el;\r\n        delete el.gridstackNode;\r\n        // and restore all nodes back to original\r\n        this.engine.restoreInitial();\r\n    }\r\n};\r\n/** @internal called when item is being dragged/resized */\r\ngridstack_1.GridStack.prototype._dragOrResize = function (el, event, ui, node, cellWidth, cellHeight) {\r\n    let p = Object.assign({}, node._orig); // could be undefined (_isExternal) which is ok (drag only set x,y and w,h will default to node value)\r\n    let resizing;\r\n    let mLeft = this.opts.marginLeft, mRight = this.opts.marginRight, mTop = this.opts.marginTop, mBottom = this.opts.marginBottom;\r\n    // if margins (which are used to pass mid point by) are large relative to cell height/width, reduce them down #1855\r\n    let mHeight = Math.round(cellHeight * 0.1), mWidth = Math.round(cellWidth * 0.1);\r\n    mLeft = Math.min(mLeft, mWidth);\r\n    mRight = Math.min(mRight, mWidth);\r\n    mTop = Math.min(mTop, mHeight);\r\n    mBottom = Math.min(mBottom, mHeight);\r\n    if (event.type === 'drag') {\r\n        if (node._temporaryRemoved)\r\n            return; // handled by dropover\r\n        let distance = ui.position.top - node._prevYPix;\r\n        node._prevYPix = ui.position.top;\r\n        utils_1.Utils.updateScrollPosition(el, ui.position, distance);\r\n        // get new position taking into account the margin in the direction we are moving! (need to pass mid point by margin)\r\n        let left = ui.position.left + (ui.position.left > node._lastUiPosition.left ? -mRight : mLeft);\r\n        let top = ui.position.top + (ui.position.top > node._lastUiPosition.top ? -mBottom : mTop);\r\n        p.x = Math.round(left / cellWidth);\r\n        p.y = Math.round(top / cellHeight);\r\n        // @ts-ignore// if we're at the bottom hitting something else, grow the grid so cursor doesn't leave when trying to place below others\r\n        let prev = this._extraDragRow;\r\n        if (this.engine.collide(node, p)) {\r\n            let row = this.getRow();\r\n            let extra = Math.max(0, (p.y + node.h) - row);\r\n            if (this.opts.maxRow && row + extra > this.opts.maxRow) {\r\n                extra = Math.max(0, this.opts.maxRow - row);\r\n            } // @ts-ignore\r\n            this._extraDragRow = extra; // @ts-ignore\r\n        }\r\n        else\r\n            this._extraDragRow = 0; // @ts-ignore\r\n        if (this._extraDragRow !== prev)\r\n            this._updateContainerHeight();\r\n        if (node.x === p.x && node.y === p.y)\r\n            return; // skip same\r\n        // DON'T skip one we tried as we might have failed because of coverage <50% before\r\n        // if (node._lastTried && node._lastTried.x === x && node._lastTried.y === y) return;\r\n    }\r\n    else if (event.type === 'resize') {\r\n        if (p.x < 0)\r\n            return;\r\n        // Scrolling page if needed\r\n        utils_1.Utils.updateScrollResize(event, el, cellHeight);\r\n        // get new size\r\n        p.w = Math.round((ui.size.width - mLeft) / cellWidth);\r\n        p.h = Math.round((ui.size.height - mTop) / cellHeight);\r\n        if (node.w === p.w && node.h === p.h)\r\n            return;\r\n        if (node._lastTried && node._lastTried.w === p.w && node._lastTried.h === p.h)\r\n            return; // skip one we tried (but failed)\r\n        // if we size on left/top side this might move us, so get possible new position as well\r\n        let left = ui.position.left + mLeft;\r\n        let top = ui.position.top + mTop;\r\n        p.x = Math.round(left / cellWidth);\r\n        p.y = Math.round(top / cellHeight);\r\n        resizing = true;\r\n    }\r\n    node._lastTried = p; // set as last tried (will nuke if we go there)\r\n    let rect = {\r\n        x: ui.position.left + mLeft,\r\n        y: ui.position.top + mTop,\r\n        w: (ui.size ? ui.size.width : node.w * cellWidth) - mLeft - mRight,\r\n        h: (ui.size ? ui.size.height : node.h * cellHeight) - mTop - mBottom\r\n    };\r\n    if (this.engine.moveNodeCheck(node, Object.assign(Object.assign({}, p), { cellWidth, cellHeight, rect, resizing }))) {\r\n        node._lastUiPosition = ui.position;\r\n        this.engine.cacheRects(cellWidth, cellHeight, mTop, mRight, mBottom, mLeft);\r\n        delete node._skipDown;\r\n        if (resizing && node.subGrid) {\r\n            node.subGrid.onParentResize();\r\n        } // @ts-ignore\r\n        this._extraDragRow = 0; // @ts-ignore\r\n        this._updateContainerHeight();\r\n        let target = event.target; // @ts-ignore\r\n        this._writePosAttr(target, node);\r\n        if (this._gsEventHandler[event.type]) {\r\n            this._gsEventHandler[event.type](event, target);\r\n        }\r\n    }\r\n};\r\n/**\r\n * Enables/Disables moving.\r\n * @param els widget or selector to modify.\r\n * @param val if true widget will be draggable.\r\n */\r\ngridstack_1.GridStack.prototype.movable = function (els, val) {\r\n    if (this.opts.staticGrid)\r\n        return this; // can't move a static grid!\r\n    gridstack_1.GridStack.getElements(els).forEach(el => {\r\n        let node = el.gridstackNode;\r\n        if (!node)\r\n            return;\r\n        if (val)\r\n            delete node.noMove;\r\n        else\r\n            node.noMove = true;\r\n        this._prepareDragDropByNode(node); // init DD if need be, and adjust\r\n    });\r\n    return this;\r\n};\r\n/**\r\n * Enables/Disables resizing.\r\n * @param els  widget or selector to modify\r\n * @param val  if true widget will be resizable.\r\n */\r\ngridstack_1.GridStack.prototype.resizable = function (els, val) {\r\n    if (this.opts.staticGrid)\r\n        return this; // can't resize a static grid!\r\n    gridstack_1.GridStack.getElements(els).forEach(el => {\r\n        let node = el.gridstackNode;\r\n        if (!node)\r\n            return;\r\n        if (val)\r\n            delete node.noResize;\r\n        else\r\n            node.noResize = true;\r\n        this._prepareDragDropByNode(node); // init DD if need be, and adjust\r\n    });\r\n    return this;\r\n};\r\n/**\r\n  * Temporarily disables widgets moving/resizing.\r\n  * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n  * Note: no-op for static grid\r\n  * This is a shortcut for:\r\n  * @example\r\n  *  grid.enableMove(false);\r\n  *  grid.enableResize(false);\r\n  */\r\ngridstack_1.GridStack.prototype.disable = function () {\r\n    if (this.opts.staticGrid)\r\n        return;\r\n    this.enableMove(false);\r\n    this.enableResize(false); // @ts-ignore\r\n    this._triggerEvent('disable');\r\n    return this;\r\n};\r\n/**\r\n  * Re-enables widgets moving/resizing - see disable().\r\n  * Note: no-op for static grid.\r\n  * This is a shortcut for:\r\n  * @example\r\n  *  grid.enableMove(true);\r\n  *  grid.enableResize(true);\r\n  */\r\ngridstack_1.GridStack.prototype.enable = function () {\r\n    if (this.opts.staticGrid)\r\n        return;\r\n    this.enableMove(true);\r\n    this.enableResize(true); // @ts-ignore\r\n    this._triggerEvent('enable');\r\n    return this;\r\n};\r\n/** Enables/disables widget moving. No-op for static grids. */\r\ngridstack_1.GridStack.prototype.enableMove = function (doEnable) {\r\n    if (this.opts.staticGrid)\r\n        return this; // can't move a static grid!\r\n    this.opts.disableDrag = !doEnable; // FIRST before we update children as grid overrides #1658\r\n    this.engine.nodes.forEach(n => this.movable(n.el, doEnable));\r\n    return this;\r\n};\r\n/** Enables/disables widget resizing. No-op for static grids. */\r\ngridstack_1.GridStack.prototype.enableResize = function (doEnable) {\r\n    if (this.opts.staticGrid)\r\n        return this; // can't size a static grid!\r\n    this.opts.disableResize = !doEnable; // FIRST before we update children as grid overrides #1658\r\n    this.engine.nodes.forEach(n => this.resizable(n.el, doEnable));\r\n    return this;\r\n};\r\n//# sourceMappingURL=gridstack-dd.js.map","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","\"use strict\";\r\n/**\r\n * dd-manager.ts 5.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DDManager = void 0;\r\nclass DDManager {\r\n}\r\nexports.DDManager = DDManager;\r\n//# sourceMappingURL=dd-manager.js.map","\"use strict\";\r\n/**\r\n * gridstack-ddi.ts 5.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GridStackDDI = void 0;\r\n/**\r\n * Abstract Partial Interface API for drag'n'drop plugin - look at GridStackDD and HTML5 / Jquery implementation versions\r\n */\r\nclass GridStackDDI {\r\n    /** call this method to register your plugin instead of the default no-op one */\r\n    static registerPlugin(pluginClass) {\r\n        GridStackDDI.ddi = new pluginClass();\r\n        return GridStackDDI.ddi;\r\n    }\r\n    /** get the current registered plugin to use */\r\n    static get() {\r\n        return GridStackDDI.ddi || GridStackDDI.registerPlugin(GridStackDDI);\r\n    }\r\n    /** removes any drag&drop present (called during destroy) */\r\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\r\n    remove(el) {\r\n        return this; // no-op for static grids\r\n    }\r\n}\r\nexports.GridStackDDI = GridStackDDI;\r\n//# sourceMappingURL=gridstack-ddi.js.map","// 게시글 목록\nexport async function widgetList(request) {\n    return await $api.get(\"/widget\", request).catch(e => { console.error(e);});\n}\n\n// 게시글 수정\nexport async function widgetModify(id, request) {\n    return await $api.patch(`/widget/${id}`, request).catch(e => { console.error(e);});\n}","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","\"use strict\";\r\n/**\r\n * dd-resizable-handle.ts 5.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DDResizableHandle = void 0;\r\nclass DDResizableHandle {\r\n    constructor(host, direction, option) {\r\n        /** @internal true after we've moved enough pixels to start a resize */\r\n        this.moving = false;\r\n        this.host = host;\r\n        this.dir = direction;\r\n        this.option = option;\r\n        // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\r\n        this._mouseDown = this._mouseDown.bind(this);\r\n        this._mouseMove = this._mouseMove.bind(this);\r\n        this._mouseUp = this._mouseUp.bind(this);\r\n        this._init();\r\n    }\r\n    /** @internal */\r\n    _init() {\r\n        const el = document.createElement('div');\r\n        el.classList.add('ui-resizable-handle');\r\n        el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);\r\n        el.style.zIndex = '100';\r\n        el.style.userSelect = 'none';\r\n        this.el = el;\r\n        this.host.appendChild(this.el);\r\n        this.el.addEventListener('mousedown', this._mouseDown);\r\n        return this;\r\n    }\r\n    /** call this when resize handle needs to be removed and cleaned up */\r\n    destroy() {\r\n        if (this.moving)\r\n            this._mouseUp(this.mouseDownEvent);\r\n        this.el.removeEventListener('mousedown', this._mouseDown);\r\n        this.host.removeChild(this.el);\r\n        delete this.el;\r\n        delete this.host;\r\n        return this;\r\n    }\r\n    /** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */\r\n    _mouseDown(e) {\r\n        e.preventDefault();\r\n        this.mouseDownEvent = e;\r\n        document.addEventListener('mousemove', this._mouseMove, true); // capture, not bubble\r\n        document.addEventListener('mouseup', this._mouseUp);\r\n    }\r\n    /** @internal */\r\n    _mouseMove(e) {\r\n        let s = this.mouseDownEvent;\r\n        // don't start unless we've moved at least 3 pixels\r\n        if (!this.moving && Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 2) {\r\n            this.moving = true;\r\n            this._triggerEvent('start', this.mouseDownEvent);\r\n        }\r\n        else if (this.moving) {\r\n            this._triggerEvent('move', e);\r\n        }\r\n    }\r\n    /** @internal */\r\n    _mouseUp(e) {\r\n        if (this.moving) {\r\n            this._triggerEvent('stop', e);\r\n        }\r\n        document.removeEventListener('mousemove', this._mouseMove, true);\r\n        document.removeEventListener('mouseup', this._mouseUp);\r\n        delete this.moving;\r\n        delete this.mouseDownEvent;\r\n    }\r\n    /** @internal */\r\n    _triggerEvent(name, event) {\r\n        if (this.option[name])\r\n            this.option[name](event);\r\n        return this;\r\n    }\r\n}\r\nexports.DDResizableHandle = DDResizableHandle;\r\n/** @internal */\r\nDDResizableHandle.prefix = 'ui-resizable-';\r\n//# sourceMappingURL=dd-resizable-handle.js.map","\"use strict\";\r\n/**\r\n * dd-resizable.ts 5.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DDResizable = void 0;\r\nconst dd_resizable_handle_1 = require(\"./dd-resizable-handle\");\r\nconst dd_base_impl_1 = require(\"./dd-base-impl\");\r\nconst dd_utils_1 = require(\"./dd-utils\");\r\nconst utils_1 = require(\"../utils\");\r\nclass DDResizable extends dd_base_impl_1.DDBaseImplement {\r\n    constructor(el, opts = {}) {\r\n        super();\r\n        /** @internal */\r\n        this._showHandlers = () => {\r\n            this.el.classList.remove('ui-resizable-autohide');\r\n        };\r\n        /** @internal */\r\n        this._hideHandlers = () => {\r\n            this.el.classList.add('ui-resizable-autohide');\r\n        };\r\n        /** @internal */\r\n        this._ui = () => {\r\n            const containmentEl = this.el.parentElement;\r\n            const containmentRect = containmentEl.getBoundingClientRect();\r\n            const newRect = {\r\n                width: this.originalRect.width,\r\n                height: this.originalRect.height + this.scrolled,\r\n                left: this.originalRect.left,\r\n                top: this.originalRect.top - this.scrolled\r\n            };\r\n            const rect = this.temporalRect || newRect;\r\n            return {\r\n                position: {\r\n                    left: rect.left - containmentRect.left,\r\n                    top: rect.top - containmentRect.top\r\n                },\r\n                size: {\r\n                    width: rect.width,\r\n                    height: rect.height\r\n                }\r\n                /* Gridstack ONLY needs position set above... keep around in case.\r\n                element: [this.el], // The object representing the element to be resized\r\n                helper: [], // TODO: not support yet - The object representing the helper that's being resized\r\n                originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped\r\n                originalPosition: { // The position represented as { left, top } before the resizable is resized\r\n                  left: this.originalRect.left - containmentRect.left,\r\n                  top: this.originalRect.top - containmentRect.top\r\n                },\r\n                originalSize: { // The size represented as { width, height } before the resizable is resized\r\n                  width: this.originalRect.width,\r\n                  height: this.originalRect.height\r\n                }\r\n                */\r\n            };\r\n        };\r\n        this.el = el;\r\n        this.option = opts;\r\n        this.enable();\r\n        this._setupAutoHide();\r\n        this._setupHandlers();\r\n    }\r\n    on(event, callback) {\r\n        super.on(event, callback);\r\n    }\r\n    off(event) {\r\n        super.off(event);\r\n    }\r\n    enable() {\r\n        super.enable();\r\n        this.el.classList.add('ui-resizable');\r\n        this.el.classList.remove('ui-resizable-disabled');\r\n    }\r\n    disable() {\r\n        super.disable();\r\n        this.el.classList.add('ui-resizable-disabled');\r\n        this.el.classList.remove('ui-resizable');\r\n    }\r\n    destroy() {\r\n        this._removeHandlers();\r\n        if (this.option.autoHide) {\r\n            this.el.removeEventListener('mouseover', this._showHandlers);\r\n            this.el.removeEventListener('mouseout', this._hideHandlers);\r\n        }\r\n        this.el.classList.remove('ui-resizable');\r\n        delete this.el;\r\n        super.destroy();\r\n    }\r\n    updateOption(opts) {\r\n        let updateHandles = (opts.handles && opts.handles !== this.option.handles);\r\n        let updateAutoHide = (opts.autoHide && opts.autoHide !== this.option.autoHide);\r\n        Object.keys(opts).forEach(key => this.option[key] = opts[key]);\r\n        if (updateHandles) {\r\n            this._removeHandlers();\r\n            this._setupHandlers();\r\n        }\r\n        if (updateAutoHide) {\r\n            this._setupAutoHide();\r\n        }\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _setupAutoHide() {\r\n        if (this.option.autoHide) {\r\n            this.el.classList.add('ui-resizable-autohide');\r\n            // use mouseover/mouseout instead of mouseenter/mouseleave to get better performance;\r\n            this.el.addEventListener('mouseover', this._showHandlers);\r\n            this.el.addEventListener('mouseout', this._hideHandlers);\r\n        }\r\n        else {\r\n            this.el.classList.remove('ui-resizable-autohide');\r\n            this.el.removeEventListener('mouseover', this._showHandlers);\r\n            this.el.removeEventListener('mouseout', this._hideHandlers);\r\n        }\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _setupHandlers() {\r\n        let handlerDirection = this.option.handles || 'e,s,se';\r\n        if (handlerDirection === 'all') {\r\n            handlerDirection = 'n,e,s,w,se,sw,ne,nw';\r\n        }\r\n        this.handlers = handlerDirection.split(',')\r\n            .map(dir => dir.trim())\r\n            .map(dir => new dd_resizable_handle_1.DDResizableHandle(this.el, dir, {\r\n            start: (event) => {\r\n                this._resizeStart(event);\r\n            },\r\n            stop: (event) => {\r\n                this._resizeStop(event);\r\n            },\r\n            move: (event) => {\r\n                this._resizing(event, dir);\r\n            }\r\n        }));\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _resizeStart(event) {\r\n        this.originalRect = this.el.getBoundingClientRect();\r\n        this.scrollEl = utils_1.Utils.getScrollElement(this.el);\r\n        this.scrollY = this.scrollEl.scrollTop;\r\n        this.scrolled = 0;\r\n        this.startEvent = event;\r\n        this._setupHelper();\r\n        this._applyChange();\r\n        const ev = dd_utils_1.DDUtils.initEvent(event, { type: 'resizestart', target: this.el });\r\n        if (this.option.start) {\r\n            this.option.start(ev, this._ui());\r\n        }\r\n        this.el.classList.add('ui-resizable-resizing');\r\n        this.triggerEvent('resizestart', ev);\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _resizing(event, dir) {\r\n        this.scrolled = this.scrollEl.scrollTop - this.scrollY;\r\n        this.temporalRect = this._getChange(event, dir);\r\n        this._applyChange();\r\n        const ev = dd_utils_1.DDUtils.initEvent(event, { type: 'resize', target: this.el });\r\n        if (this.option.resize) {\r\n            this.option.resize(ev, this._ui());\r\n        }\r\n        this.triggerEvent('resize', ev);\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _resizeStop(event) {\r\n        const ev = dd_utils_1.DDUtils.initEvent(event, { type: 'resizestop', target: this.el });\r\n        if (this.option.stop) {\r\n            this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\r\n        }\r\n        this.el.classList.remove('ui-resizable-resizing');\r\n        this.triggerEvent('resizestop', ev);\r\n        this._cleanHelper();\r\n        delete this.startEvent;\r\n        delete this.originalRect;\r\n        delete this.temporalRect;\r\n        delete this.scrollY;\r\n        delete this.scrolled;\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _setupHelper() {\r\n        this.elOriginStyleVal = DDResizable._originStyleProp.map(prop => this.el.style[prop]);\r\n        this.parentOriginStylePosition = this.el.parentElement.style.position;\r\n        if (window.getComputedStyle(this.el.parentElement).position.match(/static/)) {\r\n            this.el.parentElement.style.position = 'relative';\r\n        }\r\n        this.el.style.position = 'absolute';\r\n        this.el.style.opacity = '0.8';\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _cleanHelper() {\r\n        DDResizable._originStyleProp.forEach((prop, i) => {\r\n            this.el.style[prop] = this.elOriginStyleVal[i] || null;\r\n        });\r\n        this.el.parentElement.style.position = this.parentOriginStylePosition || null;\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _getChange(event, dir) {\r\n        const oEvent = this.startEvent;\r\n        const newRect = {\r\n            width: this.originalRect.width,\r\n            height: this.originalRect.height + this.scrolled,\r\n            left: this.originalRect.left,\r\n            top: this.originalRect.top - this.scrolled\r\n        };\r\n        const offsetX = event.clientX - oEvent.clientX;\r\n        const offsetY = event.clientY - oEvent.clientY;\r\n        if (dir.indexOf('e') > -1) {\r\n            newRect.width += offsetX;\r\n        }\r\n        else if (dir.indexOf('w') > -1) {\r\n            newRect.width -= offsetX;\r\n            newRect.left += offsetX;\r\n        }\r\n        if (dir.indexOf('s') > -1) {\r\n            newRect.height += offsetY;\r\n        }\r\n        else if (dir.indexOf('n') > -1) {\r\n            newRect.height -= offsetY;\r\n            newRect.top += offsetY;\r\n        }\r\n        const constrain = this._constrainSize(newRect.width, newRect.height);\r\n        if (Math.round(newRect.width) !== Math.round(constrain.width)) { // round to ignore slight round-off errors\r\n            if (dir.indexOf('w') > -1) {\r\n                newRect.left += newRect.width - constrain.width;\r\n            }\r\n            newRect.width = constrain.width;\r\n        }\r\n        if (Math.round(newRect.height) !== Math.round(constrain.height)) {\r\n            if (dir.indexOf('n') > -1) {\r\n                newRect.top += newRect.height - constrain.height;\r\n            }\r\n            newRect.height = constrain.height;\r\n        }\r\n        return newRect;\r\n    }\r\n    /** @internal constrain the size to the set min/max values */\r\n    _constrainSize(oWidth, oHeight) {\r\n        const maxWidth = this.option.maxWidth || Number.MAX_SAFE_INTEGER;\r\n        const minWidth = this.option.minWidth || oWidth;\r\n        const maxHeight = this.option.maxHeight || Number.MAX_SAFE_INTEGER;\r\n        const minHeight = this.option.minHeight || oHeight;\r\n        const width = Math.min(maxWidth, Math.max(minWidth, oWidth));\r\n        const height = Math.min(maxHeight, Math.max(minHeight, oHeight));\r\n        return { width, height };\r\n    }\r\n    /** @internal */\r\n    _applyChange() {\r\n        let containmentRect = { left: 0, top: 0, width: 0, height: 0 };\r\n        if (this.el.style.position === 'absolute') {\r\n            const containmentEl = this.el.parentElement;\r\n            const { left, top } = containmentEl.getBoundingClientRect();\r\n            containmentRect = { left, top, width: 0, height: 0 };\r\n        }\r\n        if (!this.temporalRect)\r\n            return this;\r\n        Object.keys(this.temporalRect).forEach(key => {\r\n            const value = this.temporalRect[key];\r\n            this.el.style[key] = value - containmentRect[key] + 'px';\r\n        });\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _removeHandlers() {\r\n        this.handlers.forEach(handle => handle.destroy());\r\n        delete this.handlers;\r\n        return this;\r\n    }\r\n}\r\nexports.DDResizable = DDResizable;\r\n/** @internal */\r\nDDResizable._originStyleProp = ['width', 'height', 'position', 'left', 'top', 'opacity', 'zIndex'];\r\n//# sourceMappingURL=dd-resizable.js.map","\"use strict\";\r\n/**\r\n * utils.ts 5.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Utils = exports.obsoleteAttr = exports.obsoleteOptsDel = exports.obsoleteOpts = exports.obsolete = void 0;\r\n/** checks for obsolete method names */\r\n// eslint-disable-next-line\r\nfunction obsolete(self, f, oldName, newName, rev) {\r\n    let wrapper = (...args) => {\r\n        console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +\r\n            'with `' + newName + '`. It will be **completely** removed in v1.0');\r\n        return f.apply(self, args);\r\n    };\r\n    wrapper.prototype = f.prototype;\r\n    return wrapper;\r\n}\r\nexports.obsolete = obsolete;\r\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\r\nfunction obsoleteOpts(opts, oldName, newName, rev) {\r\n    if (opts[oldName] !== undefined) {\r\n        opts[newName] = opts[oldName];\r\n        console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +\r\n            newName + '`. It will be **completely** removed in v1.0');\r\n    }\r\n}\r\nexports.obsoleteOpts = obsoleteOpts;\r\n/** checks for obsolete grid options which are gone */\r\nfunction obsoleteOptsDel(opts, oldName, rev, info) {\r\n    if (opts[oldName] !== undefined) {\r\n        console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\r\n    }\r\n}\r\nexports.obsoleteOptsDel = obsoleteOptsDel;\r\n/** checks for obsolete Jquery element attributes */\r\nfunction obsoleteAttr(el, oldName, newName, rev) {\r\n    let oldAttr = el.getAttribute(oldName);\r\n    if (oldAttr !== null) {\r\n        el.setAttribute(newName, oldAttr);\r\n        console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +\r\n            newName + '`. It will be **completely** removed in v1.0');\r\n    }\r\n}\r\nexports.obsoleteAttr = obsoleteAttr;\r\n/**\r\n * Utility methods\r\n */\r\nclass Utils {\r\n    /** convert a potential selector into actual list of html elements */\r\n    static getElements(els) {\r\n        if (typeof els === 'string') {\r\n            let list = document.querySelectorAll(els);\r\n            if (!list.length && els[0] !== '.' && els[0] !== '#') {\r\n                list = document.querySelectorAll('.' + els);\r\n                if (!list.length) {\r\n                    list = document.querySelectorAll('#' + els);\r\n                }\r\n            }\r\n            return Array.from(list);\r\n        }\r\n        return [els];\r\n    }\r\n    /** convert a potential selector into actual single element */\r\n    static getElement(els) {\r\n        if (typeof els === 'string') {\r\n            if (!els.length)\r\n                return null;\r\n            if (els[0] === '#') {\r\n                return document.getElementById(els.substring(1));\r\n            }\r\n            if (els[0] === '.' || els[0] === '[') {\r\n                return document.querySelector(els);\r\n            }\r\n            // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\r\n            if (!isNaN(+els[0])) { // start with digit\r\n                return document.getElementById(els);\r\n            }\r\n            // finally try string, then id then class\r\n            let el = document.querySelector(els);\r\n            if (!el) {\r\n                el = document.getElementById(els);\r\n            }\r\n            if (!el) {\r\n                el = document.querySelector('.' + els);\r\n            }\r\n            return el;\r\n        }\r\n        return els;\r\n    }\r\n    /** returns true if a and b overlap */\r\n    static isIntercepted(a, b) {\r\n        return !(a.y >= b.y + b.h || a.y + a.h <= b.y || a.x + a.w <= b.x || a.x >= b.x + b.w);\r\n    }\r\n    /** returns true if a and b touch edges or corners */\r\n    static isTouching(a, b) {\r\n        return Utils.isIntercepted(a, { x: b.x - 0.5, y: b.y - 0.5, w: b.w + 1, h: b.h + 1 });\r\n    }\r\n    /**\r\n     * Sorts array of nodes\r\n     * @param nodes array to sort\r\n     * @param dir 1 for asc, -1 for desc (optional)\r\n     * @param width width of the grid. If undefined the width will be calculated automatically (optional).\r\n     **/\r\n    static sort(nodes, dir, column) {\r\n        column = column || nodes.reduce((col, n) => Math.max(n.x + n.w, col), 0) || 12;\r\n        if (dir === -1)\r\n            return nodes.sort((a, b) => (b.x + b.y * column) - (a.x + a.y * column));\r\n        else\r\n            return nodes.sort((b, a) => (b.x + b.y * column) - (a.x + a.y * column));\r\n    }\r\n    /**\r\n     * creates a style sheet with style id under given parent\r\n     * @param id will set the 'gs-style-id' attribute to that id\r\n     * @param parent to insert the stylesheet as first child,\r\n     * if none supplied it will be appended to the document head instead.\r\n     */\r\n    static createStylesheet(id, parent) {\r\n        let style = document.createElement('style');\r\n        style.setAttribute('type', 'text/css');\r\n        style.setAttribute('gs-style-id', id);\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        if (style.styleSheet) { // TODO: only CSSImportRule have that and different beast ??\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            style.styleSheet.cssText = '';\r\n        }\r\n        else {\r\n            style.appendChild(document.createTextNode('')); // WebKit hack\r\n        }\r\n        if (!parent) {\r\n            // default to head\r\n            parent = document.getElementsByTagName('head')[0];\r\n            parent.appendChild(style);\r\n        }\r\n        else {\r\n            parent.insertBefore(style, parent.firstChild);\r\n        }\r\n        return style.sheet;\r\n    }\r\n    /** removed the given stylesheet id */\r\n    static removeStylesheet(id) {\r\n        let el = document.querySelector('STYLE[gs-style-id=' + id + ']');\r\n        if (el && el.parentNode)\r\n            el.remove();\r\n    }\r\n    /** inserts a CSS rule */\r\n    static addCSSRule(sheet, selector, rules) {\r\n        if (typeof sheet.addRule === 'function') {\r\n            sheet.addRule(selector, rules);\r\n        }\r\n        else if (typeof sheet.insertRule === 'function') {\r\n            sheet.insertRule(`${selector}{${rules}}`);\r\n        }\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    static toBool(v) {\r\n        if (typeof v === 'boolean') {\r\n            return v;\r\n        }\r\n        if (typeof v === 'string') {\r\n            v = v.toLowerCase();\r\n            return !(v === '' || v === 'no' || v === 'false' || v === '0');\r\n        }\r\n        return Boolean(v);\r\n    }\r\n    static toNumber(value) {\r\n        return (value === null || value.length === 0) ? undefined : Number(value);\r\n    }\r\n    static parseHeight(val) {\r\n        let h;\r\n        let unit = 'px';\r\n        if (typeof val === 'string') {\r\n            let match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);\r\n            if (!match) {\r\n                throw new Error('Invalid height');\r\n            }\r\n            unit = match[2] || 'px';\r\n            h = parseFloat(match[1]);\r\n        }\r\n        else {\r\n            h = val;\r\n        }\r\n        return { h, unit };\r\n    }\r\n    /** copies unset fields in target to use the given default sources values */\r\n    // eslint-disable-next-line\r\n    static defaults(target, ...sources) {\r\n        sources.forEach(source => {\r\n            for (const key in source) {\r\n                if (!source.hasOwnProperty(key))\r\n                    return;\r\n                if (target[key] === null || target[key] === undefined) {\r\n                    target[key] = source[key];\r\n                }\r\n                else if (typeof source[key] === 'object' && typeof target[key] === 'object') {\r\n                    // property is an object, recursively add it's field over... #1373\r\n                    this.defaults(target[key], source[key]);\r\n                }\r\n            }\r\n        });\r\n        return target;\r\n    }\r\n    /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\r\n    static same(a, b) {\r\n        if (typeof a !== 'object')\r\n            return a == b;\r\n        if (typeof a !== typeof b)\r\n            return false;\r\n        // else we have object, check just 1 level deep for being same things...\r\n        if (Object.keys(a).length !== Object.keys(b).length)\r\n            return false;\r\n        for (const key in a) {\r\n            if (a[key] !== b[key])\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    /** copies over b size & position (GridStackPosition), and possibly min/max as well */\r\n    static copyPos(a, b, minMax = false) {\r\n        a.x = b.x;\r\n        a.y = b.y;\r\n        a.w = b.w;\r\n        a.h = b.h;\r\n        if (!minMax)\r\n            return a;\r\n        if (b.minW)\r\n            a.minW = b.minW;\r\n        if (b.minH)\r\n            a.minH = b.minH;\r\n        if (b.maxW)\r\n            a.maxW = b.maxW;\r\n        if (b.maxH)\r\n            a.maxH = b.maxH;\r\n        return a;\r\n    }\r\n    /** true if a and b has same size & position */\r\n    static samePos(a, b) {\r\n        return a && b && a.x === b.x && a.y === b.y && a.w === b.w && a.h === b.h;\r\n    }\r\n    /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\r\n    static removeInternalAndSame(a, b) {\r\n        if (typeof a !== 'object' || typeof b !== 'object')\r\n            return;\r\n        for (let key in a) {\r\n            let val = a[key];\r\n            if (key[0] === '_' || val === b[key]) {\r\n                delete a[key];\r\n            }\r\n            else if (val && typeof val === 'object' && b[key] !== undefined) {\r\n                for (let i in val) {\r\n                    if (val[i] === b[key][i] || i[0] === '_') {\r\n                        delete val[i];\r\n                    }\r\n                }\r\n                if (!Object.keys(val).length) {\r\n                    delete a[key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /** return the closest parent (or itself) matching the given class */\r\n    static closestByClass(el, name) {\r\n        while (el) {\r\n            if (el.classList.contains(name))\r\n                return el;\r\n            el = el.parentElement;\r\n        }\r\n        return null;\r\n    }\r\n    /** delay calling the given function for given delay, preventing new calls from happening while waiting */\r\n    static throttle(func, delay) {\r\n        let isWaiting = false;\r\n        return (...args) => {\r\n            if (!isWaiting) {\r\n                isWaiting = true;\r\n                setTimeout(() => { func(...args); isWaiting = false; }, delay);\r\n            }\r\n        };\r\n    }\r\n    static removePositioningStyles(el) {\r\n        let style = el.style;\r\n        if (style.position) {\r\n            style.removeProperty('position');\r\n        }\r\n        if (style.left) {\r\n            style.removeProperty('left');\r\n        }\r\n        if (style.top) {\r\n            style.removeProperty('top');\r\n        }\r\n        if (style.width) {\r\n            style.removeProperty('width');\r\n        }\r\n        if (style.height) {\r\n            style.removeProperty('height');\r\n        }\r\n    }\r\n    /** @internal returns the passed element if scrollable, else the closest parent that will, up to the entire document scrolling element */\r\n    static getScrollElement(el) {\r\n        if (!el)\r\n            return document.scrollingElement || document.documentElement; // IE support\r\n        const style = getComputedStyle(el);\r\n        const overflowRegex = /(auto|scroll)/;\r\n        if (overflowRegex.test(style.overflow + style.overflowY)) {\r\n            return el;\r\n        }\r\n        else {\r\n            return this.getScrollElement(el.parentElement);\r\n        }\r\n    }\r\n    /** @internal */\r\n    static updateScrollPosition(el, position, distance) {\r\n        // is widget in view?\r\n        let rect = el.getBoundingClientRect();\r\n        let innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);\r\n        if (rect.top < 0 ||\r\n            rect.bottom > innerHeightOrClientHeight) {\r\n            // set scrollTop of first parent that scrolls\r\n            // if parent is larger than el, set as low as possible\r\n            // to get entire widget on screen\r\n            let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\r\n            let offsetDiffUp = rect.top;\r\n            let scrollEl = this.getScrollElement(el);\r\n            if (scrollEl !== null) {\r\n                let prevScroll = scrollEl.scrollTop;\r\n                if (rect.top < 0 && distance < 0) {\r\n                    // moving up\r\n                    if (el.offsetHeight > innerHeightOrClientHeight) {\r\n                        scrollEl.scrollTop += distance;\r\n                    }\r\n                    else {\r\n                        scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\r\n                    }\r\n                }\r\n                else if (distance > 0) {\r\n                    // moving down\r\n                    if (el.offsetHeight > innerHeightOrClientHeight) {\r\n                        scrollEl.scrollTop += distance;\r\n                    }\r\n                    else {\r\n                        scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\r\n                    }\r\n                }\r\n                // move widget y by amount scrolled\r\n                position.top += scrollEl.scrollTop - prevScroll;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @internal Function used to scroll the page.\r\n     *\r\n     * @param event `MouseEvent` that triggers the resize\r\n     * @param el `HTMLElement` that's being resized\r\n     * @param distance Distance from the V edges to start scrolling\r\n     */\r\n    static updateScrollResize(event, el, distance) {\r\n        const scrollEl = this.getScrollElement(el);\r\n        const height = scrollEl.clientHeight;\r\n        // #1727 event.clientY is relative to viewport, so must compare this against position of scrollEl getBoundingClientRect().top\r\n        // #1745 Special situation if scrollEl is document 'html': here browser spec states that\r\n        // clientHeight is height of viewport, but getBoundingClientRect() is rectangle of html element;\r\n        // this discrepancy arises because in reality scrollbar is attached to viewport, not html element itself.\r\n        const offsetTop = (scrollEl === this.getScrollElement()) ? 0 : scrollEl.getBoundingClientRect().top;\r\n        const pointerPosY = event.clientY - offsetTop;\r\n        const top = pointerPosY < distance;\r\n        const bottom = pointerPosY > height - distance;\r\n        if (top) {\r\n            // This also can be done with a timeout to keep scrolling while the mouse is\r\n            // in the scrolling zone. (will have smoother behavior)\r\n            scrollEl.scrollBy({ behavior: 'smooth', top: pointerPosY - distance });\r\n        }\r\n        else if (bottom) {\r\n            scrollEl.scrollBy({ behavior: 'smooth', top: distance - (height - pointerPosY) });\r\n        }\r\n    }\r\n    /** single level clone, returning a new object with same top fields. This will share sub objects and arrays */\r\n    static clone(obj) {\r\n        if (obj === null || obj === undefined || typeof (obj) !== 'object') {\r\n            return obj;\r\n        }\r\n        // return Object.assign({}, obj);\r\n        if (obj instanceof Array) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            return [...obj];\r\n        }\r\n        return Object.assign({}, obj);\r\n    }\r\n    /**\r\n     * Recursive clone version that returns a full copy, checking for nested objects and arrays ONLY.\r\n     * Note: this will use as-is any key starting with double __ (and not copy inside) some lib have circular dependencies.\r\n     */\r\n    static cloneDeep(obj) {\r\n        // return JSON.parse(JSON.stringify(obj)); // doesn't work with date format ?\r\n        const ret = Utils.clone(obj);\r\n        for (const key in ret) {\r\n            // NOTE: we don't support function/circular dependencies so skip those properties for now...\r\n            if (ret.hasOwnProperty(key) && typeof (ret[key]) === 'object' && key.substring(0, 2) !== '__' && !skipFields.find(k => k === key)) {\r\n                ret[key] = Utils.cloneDeep(obj[key]);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n}\r\nexports.Utils = Utils;\r\n// list of fields we will skip during cloneDeep (nested objects, other internal)\r\nconst skipFields = ['_isNested', 'el', 'grid', 'subGrid', 'engine'];\r\n//# sourceMappingURL=utils.js.map","\"use strict\";\r\n/**\r\n * gridstack-dd-native.ts 5.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GridStackDDNative = void 0;\r\nconst dd_manager_1 = require(\"./dd-manager\");\r\nconst dd_element_1 = require(\"./dd-element\");\r\nconst gridstack_dd_1 = require(\"../gridstack-dd\");\r\nconst utils_1 = require(\"../utils\");\r\n// export our base class (what user should use) and all associated types\r\n__exportStar(require(\"../gridstack-dd\"), exports);\r\n/**\r\n * HTML 5 Native DragDrop based drag'n'drop plugin.\r\n */\r\nclass GridStackDDNative extends gridstack_dd_1.GridStackDD {\r\n    resizable(el, opts, key, value) {\r\n        this._getDDElements(el).forEach(dEl => {\r\n            if (opts === 'disable' || opts === 'enable') {\r\n                dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\r\n            }\r\n            else if (opts === 'destroy') {\r\n                dEl.ddResizable && dEl.cleanResizable();\r\n            }\r\n            else if (opts === 'option') {\r\n                dEl.setupResizable({ [key]: value });\r\n            }\r\n            else {\r\n                const grid = dEl.el.gridstackNode.grid;\r\n                let handles = dEl.el.getAttribute('gs-resize-handles') ? dEl.el.getAttribute('gs-resize-handles') : grid.opts.resizable.handles;\r\n                dEl.setupResizable(Object.assign(Object.assign(Object.assign({}, grid.opts.resizable), { handles: handles }), {\r\n                    start: opts.start,\r\n                    stop: opts.stop,\r\n                    resize: opts.resize\r\n                }));\r\n            }\r\n        });\r\n        return this;\r\n    }\r\n    draggable(el, opts, key, value) {\r\n        this._getDDElements(el).forEach(dEl => {\r\n            if (opts === 'disable' || opts === 'enable') {\r\n                dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\r\n            }\r\n            else if (opts === 'destroy') {\r\n                dEl.ddDraggable && dEl.cleanDraggable();\r\n            }\r\n            else if (opts === 'option') {\r\n                dEl.setupDraggable({ [key]: value });\r\n            }\r\n            else {\r\n                const grid = dEl.el.gridstackNode.grid;\r\n                dEl.setupDraggable(Object.assign(Object.assign({}, grid.opts.draggable), {\r\n                    containment: (grid.opts._isNested && !grid.opts.dragOut)\r\n                        ? grid.el.parentElement\r\n                        : (grid.opts.draggable.containment || null),\r\n                    start: opts.start,\r\n                    stop: opts.stop,\r\n                    drag: opts.drag\r\n                }));\r\n            }\r\n        });\r\n        return this;\r\n    }\r\n    dragIn(el, opts) {\r\n        this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\r\n        return this;\r\n    }\r\n    droppable(el, opts, key, value) {\r\n        if (typeof opts.accept === 'function' && !opts._accept) {\r\n            opts._accept = opts.accept;\r\n            opts.accept = (el) => opts._accept(el);\r\n        }\r\n        this._getDDElements(el).forEach(dEl => {\r\n            if (opts === 'disable' || opts === 'enable') {\r\n                dEl.ddDroppable && dEl.ddDroppable[opts]();\r\n            }\r\n            else if (opts === 'destroy') {\r\n                if (dEl.ddDroppable) { // error to call destroy if not there\r\n                    dEl.cleanDroppable();\r\n                }\r\n            }\r\n            else if (opts === 'option') {\r\n                dEl.setupDroppable({ [key]: value });\r\n            }\r\n            else {\r\n                dEl.setupDroppable(opts);\r\n            }\r\n        });\r\n        return this;\r\n    }\r\n    /** true if element is droppable */\r\n    isDroppable(el) {\r\n        return !!(el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled);\r\n    }\r\n    /** true if element is draggable */\r\n    isDraggable(el) {\r\n        return !!(el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled);\r\n    }\r\n    /** true if element is draggable */\r\n    isResizable(el) {\r\n        return !!(el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled);\r\n    }\r\n    on(el, name, callback) {\r\n        this._getDDElements(el).forEach(dEl => dEl.on(name, (event) => {\r\n            callback(event, dd_manager_1.DDManager.dragElement ? dd_manager_1.DDManager.dragElement.el : event.target, dd_manager_1.DDManager.dragElement ? dd_manager_1.DDManager.dragElement.helper : null);\r\n        }));\r\n        return this;\r\n    }\r\n    off(el, name) {\r\n        this._getDDElements(el).forEach(dEl => dEl.off(name));\r\n        return this;\r\n    }\r\n    /** @internal returns a list of DD elements, creating them on the fly by default */\r\n    _getDDElements(els, create = true) {\r\n        let hosts = utils_1.Utils.getElements(els);\r\n        if (!hosts.length)\r\n            return [];\r\n        let list = hosts.map(e => e.ddElement || (create ? dd_element_1.DDElement.init(e) : null));\r\n        if (!create) {\r\n            list.filter(d => d);\r\n        } // remove nulls\r\n        return list;\r\n    }\r\n}\r\nexports.GridStackDDNative = GridStackDDNative;\r\n// finally register ourself\r\ngridstack_dd_1.GridStackDD.registerPlugin(GridStackDDNative);\r\n//# sourceMappingURL=gridstack-dd-native.js.map","\"use strict\";\r\n/**\r\n * dd-elements.ts 5.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DDElement = void 0;\r\nconst dd_resizable_1 = require(\"./dd-resizable\");\r\nconst dd_draggable_1 = require(\"./dd-draggable\");\r\nconst dd_droppable_1 = require(\"./dd-droppable\");\r\nclass DDElement {\r\n    constructor(el) {\r\n        this.el = el;\r\n    }\r\n    static init(el) {\r\n        if (!el.ddElement) {\r\n            el.ddElement = new DDElement(el);\r\n        }\r\n        return el.ddElement;\r\n    }\r\n    on(eventName, callback) {\r\n        if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\r\n            this.ddDraggable.on(eventName, callback);\r\n        }\r\n        else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\r\n            this.ddDroppable.on(eventName, callback);\r\n        }\r\n        else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\r\n            this.ddResizable.on(eventName, callback);\r\n        }\r\n        return this;\r\n    }\r\n    off(eventName) {\r\n        if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\r\n            this.ddDraggable.off(eventName);\r\n        }\r\n        else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\r\n            this.ddDroppable.off(eventName);\r\n        }\r\n        else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\r\n            this.ddResizable.off(eventName);\r\n        }\r\n        return this;\r\n    }\r\n    setupDraggable(opts) {\r\n        if (!this.ddDraggable) {\r\n            this.ddDraggable = new dd_draggable_1.DDDraggable(this.el, opts);\r\n        }\r\n        else {\r\n            this.ddDraggable.updateOption(opts);\r\n        }\r\n        return this;\r\n    }\r\n    cleanDraggable() {\r\n        if (this.ddDraggable) {\r\n            this.ddDraggable.destroy();\r\n            delete this.ddDraggable;\r\n        }\r\n        return this;\r\n    }\r\n    setupResizable(opts) {\r\n        if (!this.ddResizable) {\r\n            this.ddResizable = new dd_resizable_1.DDResizable(this.el, opts);\r\n        }\r\n        else {\r\n            this.ddResizable.updateOption(opts);\r\n        }\r\n        return this;\r\n    }\r\n    cleanResizable() {\r\n        if (this.ddResizable) {\r\n            this.ddResizable.destroy();\r\n            delete this.ddResizable;\r\n        }\r\n        return this;\r\n    }\r\n    setupDroppable(opts) {\r\n        if (!this.ddDroppable) {\r\n            this.ddDroppable = new dd_droppable_1.DDDroppable(this.el, opts);\r\n        }\r\n        else {\r\n            this.ddDroppable.updateOption(opts);\r\n        }\r\n        return this;\r\n    }\r\n    cleanDroppable() {\r\n        if (this.ddDroppable) {\r\n            this.ddDroppable.destroy();\r\n            delete this.ddDroppable;\r\n        }\r\n        return this;\r\n    }\r\n}\r\nexports.DDElement = DDElement;\r\n//# sourceMappingURL=dd-element.js.map","\"use strict\";\r\n/**\r\n * dd-draggable.ts 5.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DDDraggable = void 0;\r\nconst dd_manager_1 = require(\"./dd-manager\");\r\nconst dd_utils_1 = require(\"./dd-utils\");\r\nconst dd_base_impl_1 = require(\"./dd-base-impl\");\r\nclass DDDraggable extends dd_base_impl_1.DDBaseImplement {\r\n    constructor(el, option = {}) {\r\n        super();\r\n        /** @internal */\r\n        this.dragging = false;\r\n        /** @internal TODO: set to public as called by DDDroppable! */\r\n        this.ui = () => {\r\n            const containmentEl = this.el.parentElement;\r\n            const containmentRect = containmentEl.getBoundingClientRect();\r\n            const offset = this.helper.getBoundingClientRect();\r\n            return {\r\n                position: {\r\n                    top: offset.top - containmentRect.top,\r\n                    left: offset.left - containmentRect.left\r\n                }\r\n                /* not used by GridStack for now...\r\n                helper: [this.helper], //The object arr representing the helper that's being dragged.\r\n                offset: { top: offset.top, left: offset.left } // Current offset position of the helper as { top, left } object.\r\n                */\r\n            };\r\n        };\r\n        this.el = el;\r\n        this.option = option;\r\n        // get the element that is actually supposed to be dragged by\r\n        let className = option.handle.substring(1);\r\n        this.dragEl = el.classList.contains(className) ? el : el.querySelector(option.handle) || el;\r\n        // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\r\n        this._dragStart = this._dragStart.bind(this);\r\n        this._drag = this._drag.bind(this);\r\n        this._dragEnd = this._dragEnd.bind(this);\r\n        this.enable();\r\n    }\r\n    on(event, callback) {\r\n        super.on(event, callback);\r\n    }\r\n    off(event) {\r\n        super.off(event);\r\n    }\r\n    enable() {\r\n        super.enable();\r\n        this.dragEl.draggable = true;\r\n        this.dragEl.addEventListener('dragstart', this._dragStart);\r\n        this.el.classList.remove('ui-draggable-disabled');\r\n        this.el.classList.add('ui-draggable');\r\n    }\r\n    disable(forDestroy = false) {\r\n        super.disable();\r\n        this.dragEl.removeAttribute('draggable');\r\n        this.dragEl.removeEventListener('dragstart', this._dragStart);\r\n        this.el.classList.remove('ui-draggable');\r\n        if (!forDestroy)\r\n            this.el.classList.add('ui-draggable-disabled');\r\n    }\r\n    destroy() {\r\n        if (this.dragging) {\r\n            // Destroy while dragging should remove dragend listener and manually trigger\r\n            // dragend, otherwise dragEnd can't perform dragstop because eventRegistry is\r\n            // destroyed.\r\n            this._dragEnd({});\r\n        }\r\n        this.disable(true);\r\n        delete this.el;\r\n        delete this.helper;\r\n        delete this.option;\r\n        super.destroy();\r\n    }\r\n    updateOption(opts) {\r\n        Object.keys(opts).forEach(key => this.option[key] = opts[key]);\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _dragStart(event) {\r\n        dd_manager_1.DDManager.dragElement = this;\r\n        this.helper = this._createHelper(event);\r\n        this._setupHelperContainmentStyle();\r\n        this.dragOffset = this._getDragOffset(event, this.el, this.helperContainment);\r\n        const ev = dd_utils_1.DDUtils.initEvent(event, { target: this.el, type: 'dragstart' });\r\n        if (this.helper !== this.el) {\r\n            this._setupDragFollowNodeNotifyStart(ev);\r\n            // immediately set external helper initial position to avoid flickering behavior and unnecessary looping in `_packNodes()`\r\n            this._dragFollow(event);\r\n        }\r\n        else {\r\n            this.dragFollowTimer = window.setTimeout(() => {\r\n                delete this.dragFollowTimer;\r\n                this._setupDragFollowNodeNotifyStart(ev);\r\n            }, 0);\r\n        }\r\n        this._cancelDragGhost(event);\r\n    }\r\n    /** @internal */\r\n    _setupDragFollowNodeNotifyStart(ev) {\r\n        this._setupHelperStyle();\r\n        document.addEventListener('dragover', this._drag, DDDraggable.dragEventListenerOption);\r\n        this.dragEl.addEventListener('dragend', this._dragEnd);\r\n        if (this.option.start) {\r\n            this.option.start(ev, this.ui());\r\n        }\r\n        this.dragging = true;\r\n        this.helper.classList.add('ui-draggable-dragging');\r\n        this.triggerEvent('dragstart', ev);\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _drag(event) {\r\n        // Safari: prevent default to allow drop to happen instead of reverting back (with animation) and delaying dragend #1541\r\n        // https://stackoverflow.com/questions/61760755/how-to-fire-dragend-event-immediately\r\n        event.preventDefault();\r\n        this._dragFollow(event);\r\n        const ev = dd_utils_1.DDUtils.initEvent(event, { target: this.el, type: 'drag' });\r\n        if (this.option.drag) {\r\n            this.option.drag(ev, this.ui());\r\n        }\r\n        this.triggerEvent('drag', ev);\r\n    }\r\n    /** @internal */\r\n    _dragEnd(event) {\r\n        if (this.dragFollowTimer) {\r\n            clearTimeout(this.dragFollowTimer);\r\n            delete this.dragFollowTimer;\r\n            return;\r\n        }\r\n        else {\r\n            if (this.paintTimer) {\r\n                cancelAnimationFrame(this.paintTimer);\r\n            }\r\n            document.removeEventListener('dragover', this._drag, DDDraggable.dragEventListenerOption);\r\n            this.dragEl.removeEventListener('dragend', this._dragEnd);\r\n        }\r\n        this.dragging = false;\r\n        this.helper.classList.remove('ui-draggable-dragging');\r\n        this.helperContainment.style.position = this.parentOriginStylePosition || null;\r\n        if (this.helper === this.el) {\r\n            this._removeHelperStyle();\r\n        }\r\n        else {\r\n            this.helper.remove();\r\n        }\r\n        const ev = dd_utils_1.DDUtils.initEvent(event, { target: this.el, type: 'dragstop' });\r\n        if (this.option.stop) {\r\n            this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\r\n        }\r\n        this.triggerEvent('dragstop', ev);\r\n        delete dd_manager_1.DDManager.dragElement;\r\n        delete this.helper;\r\n    }\r\n    /** @internal create a clone copy (or user defined method) of the original drag item if set */\r\n    _createHelper(event) {\r\n        let helper = this.el;\r\n        if (typeof this.option.helper === 'function') {\r\n            helper = this.option.helper(event);\r\n        }\r\n        else if (this.option.helper === 'clone') {\r\n            helper = dd_utils_1.DDUtils.clone(this.el);\r\n        }\r\n        if (!document.body.contains(helper)) {\r\n            dd_utils_1.DDUtils.appendTo(helper, this.option.appendTo === 'parent' ? this.el.parentNode : this.option.appendTo);\r\n        }\r\n        if (helper === this.el) {\r\n            this.dragElementOriginStyle = DDDraggable.originStyleProp.map(prop => this.el.style[prop]);\r\n        }\r\n        return helper;\r\n    }\r\n    /** @internal */\r\n    _setupHelperStyle() {\r\n        // TODO: set all at once with style.cssText += ... ? https://stackoverflow.com/questions/3968593\r\n        const rec = this.helper.getBoundingClientRect();\r\n        const style = this.helper.style;\r\n        style.pointerEvents = 'none';\r\n        style['min-width'] = 0; // since we no longer relative to our parent and we don't resize anyway (normally 100/#column %)\r\n        style.width = this.dragOffset.width + 'px';\r\n        style.height = this.dragOffset.height + 'px';\r\n        style.willChange = 'left, top';\r\n        style.position = 'fixed'; // let us drag between grids by not clipping as parent .grid-stack is position: 'relative'\r\n        style.left = rec.left + 'px';\r\n        style.top = rec.top + 'px';\r\n        style.transition = 'none'; // show up instantly\r\n        setTimeout(() => {\r\n            if (this.helper) {\r\n                style.transition = null; // recover animation\r\n            }\r\n        }, 0);\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _removeHelperStyle() {\r\n        // don't bother restoring styles if we're gonna remove anyway...\r\n        let node = this.helper ? this.helper.gridstackNode : undefined;\r\n        if (this.dragElementOriginStyle && (!node || !node._isAboutToRemove)) {\r\n            DDDraggable.originStyleProp.forEach(prop => {\r\n                this.helper.style[prop] = this.dragElementOriginStyle[prop] || null;\r\n            });\r\n            // show up instantly otherwise we animate to off the grid when switching back to 'absolute' from 'fixed'\r\n            this.helper.style.transition = 'none';\r\n            setTimeout(() => {\r\n                if (this.helper) {\r\n                    this.helper.style.transition = this.dragElementOriginStyle['transition']; // recover animation\r\n                }\r\n            }, 0);\r\n        }\r\n        delete this.dragElementOriginStyle;\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _dragFollow(event) {\r\n        if (this.paintTimer) {\r\n            cancelAnimationFrame(this.paintTimer);\r\n        }\r\n        this.paintTimer = requestAnimationFrame(() => {\r\n            delete this.paintTimer;\r\n            const offset = this.dragOffset;\r\n            let containmentRect = { left: 0, top: 0 };\r\n            if (this.helper.style.position === 'absolute') {\r\n                const { left, top } = this.helperContainment.getBoundingClientRect();\r\n                containmentRect = { left, top };\r\n            }\r\n            this.helper.style.left = event.clientX + offset.offsetLeft - containmentRect.left + 'px';\r\n            this.helper.style.top = event.clientY + offset.offsetTop - containmentRect.top + 'px';\r\n        });\r\n    }\r\n    /** @internal */\r\n    _setupHelperContainmentStyle() {\r\n        this.helperContainment = this.helper.parentElement;\r\n        if (this.helper.style.position !== 'fixed') {\r\n            this.parentOriginStylePosition = this.helperContainment.style.position;\r\n            if (window.getComputedStyle(this.helperContainment).position.match(/static/)) {\r\n                this.helperContainment.style.position = 'relative';\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /** @internal prevent the default ghost image to be created (which has wrong as we move the helper/element instead\r\n     * (legacy jquery UI code updates the top/left of the item).\r\n     * TODO: maybe use mouse event instead of HTML5 drag as we have to work around it anyway, or change code to not update\r\n     * the actual grid-item but move the ghost image around (and special case jq version) ?\r\n     **/\r\n    _cancelDragGhost(e) {\r\n        /* doesn't seem to do anything...\r\n        let t = e.dataTransfer;\r\n        t.effectAllowed = 'none';\r\n        t.dropEffect = 'none';\r\n        t.setData('text', '');\r\n        */\r\n        // NOTE: according to spec (and required by Safari see #1540) the image has to be visible in the browser (in dom and not hidden) so make it a 1px div\r\n        let img = document.createElement('div');\r\n        img.style.width = '1px';\r\n        img.style.height = '1px';\r\n        img.style.position = 'fixed'; // prevent unwanted scrollbar\r\n        document.body.appendChild(img);\r\n        e.dataTransfer.setDragImage(img, 0, 0);\r\n        setTimeout(() => document.body.removeChild(img)); // nuke once drag had a chance to grab this 'image'\r\n        e.stopPropagation();\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _getDragOffset(event, el, parent) {\r\n        // in case ancestor has transform/perspective css properties that change the viewpoint\r\n        let xformOffsetX = 0;\r\n        let xformOffsetY = 0;\r\n        if (parent) {\r\n            const testEl = document.createElement('div');\r\n            dd_utils_1.DDUtils.addElStyles(testEl, {\r\n                opacity: '0',\r\n                position: 'fixed',\r\n                top: 0 + 'px',\r\n                left: 0 + 'px',\r\n                width: '1px',\r\n                height: '1px',\r\n                zIndex: '-999999',\r\n            });\r\n            parent.appendChild(testEl);\r\n            const testElPosition = testEl.getBoundingClientRect();\r\n            parent.removeChild(testEl);\r\n            xformOffsetX = testElPosition.left;\r\n            xformOffsetY = testElPosition.top;\r\n            // TODO: scale ?\r\n        }\r\n        const targetOffset = el.getBoundingClientRect();\r\n        return {\r\n            left: targetOffset.left,\r\n            top: targetOffset.top,\r\n            offsetLeft: -event.clientX + targetOffset.left - xformOffsetX,\r\n            offsetTop: -event.clientY + targetOffset.top - xformOffsetY,\r\n            width: targetOffset.width,\r\n            height: targetOffset.height\r\n        };\r\n    }\r\n}\r\nexports.DDDraggable = DDDraggable;\r\n/** @internal #1541 can't have {passive: true} on Safari as otherwise it reverts animate back to old location on drop */\r\nDDDraggable.dragEventListenerOption = true; // DDUtils.isEventSupportPassiveOption ? { capture: true, passive: true } : true;\r\n/** @internal */\r\nDDDraggable.originStyleProp = ['transition', 'pointerEvents', 'position',\r\n    'left', 'top', 'opacity', 'zIndex', 'width', 'height', 'willChange', 'min-width'];\r\n//# sourceMappingURL=dd-draggable.js.map","\"use strict\";\r\n/**\r\n * dd-droppable.ts 5.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DDDroppable = void 0;\r\nconst dd_manager_1 = require(\"./dd-manager\");\r\nconst dd_base_impl_1 = require(\"./dd-base-impl\");\r\nconst dd_utils_1 = require(\"./dd-utils\");\r\n// TEST let count = 0;\r\nclass DDDroppable extends dd_base_impl_1.DDBaseImplement {\r\n    constructor(el, opts = {}) {\r\n        super();\r\n        this.el = el;\r\n        this.option = opts;\r\n        // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\r\n        this._dragEnter = this._dragEnter.bind(this);\r\n        this._dragOver = this._dragOver.bind(this);\r\n        this._dragLeave = this._dragLeave.bind(this);\r\n        this._drop = this._drop.bind(this);\r\n        this.el.classList.add('ui-droppable');\r\n        this.el.addEventListener('dragenter', this._dragEnter);\r\n        this._setupAccept();\r\n    }\r\n    on(event, callback) {\r\n        super.on(event, callback);\r\n    }\r\n    off(event) {\r\n        super.off(event);\r\n    }\r\n    enable() {\r\n        if (!this.disabled)\r\n            return;\r\n        super.enable();\r\n        this.el.classList.remove('ui-droppable-disabled');\r\n        this.el.addEventListener('dragenter', this._dragEnter);\r\n    }\r\n    disable(forDestroy = false) {\r\n        if (this.disabled)\r\n            return;\r\n        super.disable();\r\n        if (!forDestroy)\r\n            this.el.classList.add('ui-droppable-disabled');\r\n        this.el.removeEventListener('dragenter', this._dragEnter);\r\n    }\r\n    destroy() {\r\n        this._removeLeaveCallbacks();\r\n        this.disable(true);\r\n        this.el.classList.remove('ui-droppable');\r\n        this.el.classList.remove('ui-droppable-disabled');\r\n        super.destroy();\r\n    }\r\n    updateOption(opts) {\r\n        Object.keys(opts).forEach(key => this.option[key] = opts[key]);\r\n        this._setupAccept();\r\n        return this;\r\n    }\r\n    /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */\r\n    _dragEnter(event) {\r\n        // TEST console.log(`${count++} Enter ${(this.el as GridHTMLElement).gridstack.opts.id}`);\r\n        if (!this._canDrop())\r\n            return;\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // ignore multiple 'dragenter' as we go over existing items\r\n        if (this.moving)\r\n            return;\r\n        this.moving = true;\r\n        const ev = dd_utils_1.DDUtils.initEvent(event, { target: this.el, type: 'dropover' });\r\n        if (this.option.over) {\r\n            this.option.over(ev, this._ui(dd_manager_1.DDManager.dragElement));\r\n        }\r\n        this.triggerEvent('dropover', ev);\r\n        this.el.addEventListener('dragover', this._dragOver);\r\n        this.el.addEventListener('drop', this._drop);\r\n        this.el.addEventListener('dragleave', this._dragLeave);\r\n        // Update: removed that as it causes nested grids to no receive dragenter events when parent drags and sets this for #992. not seeing cursor flicker (chrome).\r\n        // this.el.classList.add('ui-droppable-over');\r\n        // make sure when we enter this, that the last one gets a leave to correctly cleanup as we don't always do\r\n        if (DDDroppable.lastActive && DDDroppable.lastActive !== this) {\r\n            DDDroppable.lastActive._dragLeave(event, true);\r\n        }\r\n        DDDroppable.lastActive = this;\r\n    }\r\n    /** @internal called when an moving to drop item is being dragged over - do nothing but eat the event */\r\n    _dragOver(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n    /** @internal called when the item is leaving our area, stop tracking if we had moving item */\r\n    _dragLeave(event, forceLeave) {\r\n        var _a;\r\n        // TEST console.log(`${count++} Leave ${(this.el as GridHTMLElement).gridstack.opts.id}`);\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // ignore leave events on our children (we get them when starting to drag our items)\r\n        // but exclude nested grids since we would still be leaving ourself, \r\n        // but don't handle leave if we're dragging a nested grid around\r\n        if (!forceLeave) {\r\n            let onChild = dd_utils_1.DDUtils.inside(event, this.el);\r\n            let drag = dd_manager_1.DDManager.dragElement.el;\r\n            if (onChild && !((_a = drag.gridstackNode) === null || _a === void 0 ? void 0 : _a.subGrid)) { // dragging a nested grid ?\r\n                let nestedEl = this.el.gridstack.engine.nodes.filter(n => n.subGrid).map(n => n.subGrid.el);\r\n                onChild = !nestedEl.some(el => dd_utils_1.DDUtils.inside(event, el));\r\n            }\r\n            if (onChild)\r\n                return;\r\n        }\r\n        if (this.moving) {\r\n            const ev = dd_utils_1.DDUtils.initEvent(event, { target: this.el, type: 'dropout' });\r\n            if (this.option.out) {\r\n                this.option.out(ev, this._ui(dd_manager_1.DDManager.dragElement));\r\n            }\r\n            this.triggerEvent('dropout', ev);\r\n        }\r\n        this._removeLeaveCallbacks();\r\n        if (DDDroppable.lastActive === this) {\r\n            delete DDDroppable.lastActive;\r\n        }\r\n    }\r\n    /** @internal item is being dropped on us - call the client drop event */\r\n    _drop(event) {\r\n        if (!this.moving)\r\n            return; // should not have received event...\r\n        event.preventDefault();\r\n        const ev = dd_utils_1.DDUtils.initEvent(event, { target: this.el, type: 'drop' });\r\n        if (this.option.drop) {\r\n            this.option.drop(ev, this._ui(dd_manager_1.DDManager.dragElement));\r\n        }\r\n        this.triggerEvent('drop', ev);\r\n        this._removeLeaveCallbacks();\r\n    }\r\n    /** @internal called to remove callbacks when leaving or dropping */\r\n    _removeLeaveCallbacks() {\r\n        if (!this.moving) {\r\n            return;\r\n        }\r\n        delete this.moving;\r\n        this.el.removeEventListener('dragover', this._dragOver);\r\n        this.el.removeEventListener('drop', this._drop);\r\n        this.el.removeEventListener('dragleave', this._dragLeave);\r\n        // Update: removed that as it causes nested grids to no receive dragenter events when parent drags and sets this for #992. not seeing cursor flicker (chrome).\r\n        // this.el.classList.remove('ui-droppable-over');\r\n    }\r\n    /** @internal */\r\n    _canDrop() {\r\n        return dd_manager_1.DDManager.dragElement && (!this.accept || this.accept(dd_manager_1.DDManager.dragElement.el));\r\n    }\r\n    /** @internal */\r\n    _setupAccept() {\r\n        if (this.option.accept && typeof this.option.accept === 'string') {\r\n            this.accept = (el) => {\r\n                return el.matches(this.option.accept);\r\n            };\r\n        }\r\n        else {\r\n            this.accept = this.option.accept;\r\n        }\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _ui(drag) {\r\n        return Object.assign({ draggable: drag.el }, drag.ui());\r\n    }\r\n}\r\nexports.DDDroppable = DDDroppable;\r\n//# sourceMappingURL=dd-droppable.js.map","\"use strict\";\r\n/**\r\n * gridstack-engine.ts 5.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GridStackEngine = void 0;\r\nconst utils_1 = require(\"./utils\");\r\n/**\r\n * Defines the GridStack engine that does most no DOM grid manipulation.\r\n * See GridStack methods and vars for descriptions.\r\n *\r\n * NOTE: values should not be modified directly - call the main GridStack API instead\r\n */\r\nclass GridStackEngine {\r\n    constructor(opts = {}) {\r\n        this.addedNodes = [];\r\n        this.removedNodes = [];\r\n        this.column = opts.column || 12;\r\n        this.onChange = opts.onChange;\r\n        this._float = opts.float;\r\n        this.maxRow = opts.maxRow;\r\n        this.nodes = opts.nodes || [];\r\n    }\r\n    batchUpdate() {\r\n        if (this.batchMode)\r\n            return this;\r\n        this.batchMode = true;\r\n        this._prevFloat = this._float;\r\n        this._float = true; // let things go anywhere for now... commit() will restore and possibly reposition\r\n        this.saveInitial(); // since begin update (which is called multiple times) won't do this\r\n        return this;\r\n    }\r\n    commit() {\r\n        if (!this.batchMode)\r\n            return this;\r\n        this.batchMode = false;\r\n        this._float = this._prevFloat;\r\n        delete this._prevFloat;\r\n        return this._packNodes()\r\n            ._notify();\r\n    }\r\n    // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\r\n    _useEntireRowArea(node, nn) {\r\n        return !this.float && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\r\n    }\r\n    /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\r\n     * return true if we moved. */\r\n    _fixCollisions(node, nn = node, collide, opt = {}) {\r\n        this._sortNodes(-1); // from last to first, so recursive collision move items in the right order\r\n        collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\r\n        if (!collide)\r\n            return false;\r\n        // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\r\n        if (node._moving && !opt.nested && !this.float) {\r\n            if (this.swap(node, collide))\r\n                return true;\r\n        }\r\n        // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\r\n        let area = nn;\r\n        if (this._useEntireRowArea(node, nn)) {\r\n            area = { x: 0, w: this.column, y: nn.y, h: nn.h };\r\n            collide = this.collide(node, area, opt.skip); // force new hit\r\n        }\r\n        let didMove = false;\r\n        let newOpt = { nested: true, pack: false };\r\n        while (collide = collide || this.collide(node, area, opt.skip)) { // could collide with more than 1 item... so repeat for each\r\n            let moved;\r\n            // if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,\r\n            // but remember that skip down so we only do this once (and push others otherwise).\r\n            if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float &&\r\n                // can take space we had, or before where we're going\r\n                (!this.collide(collide, Object.assign(Object.assign({}, collide), { y: node.y }), node) || !this.collide(collide, Object.assign(Object.assign({}, collide), { y: nn.y - collide.h }), node))) {\r\n                node._skipDown = (node._skipDown || nn.y > node.y);\r\n                moved = this.moveNode(node, Object.assign(Object.assign(Object.assign({}, nn), { y: collide.y + collide.h }), newOpt));\r\n                if (collide.locked && moved) {\r\n                    utils_1.Utils.copyPos(nn, node); // moving after lock become our new desired location\r\n                }\r\n                else if (!collide.locked && moved && opt.pack) {\r\n                    // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\r\n                    this._packNodes();\r\n                    nn.y = collide.y + collide.h;\r\n                    utils_1.Utils.copyPos(node, nn);\r\n                }\r\n                didMove = didMove || moved;\r\n            }\r\n            else {\r\n                // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\r\n                moved = this.moveNode(collide, Object.assign(Object.assign(Object.assign({}, collide), { y: nn.y + nn.h, skip: node }), newOpt));\r\n            }\r\n            if (!moved) {\r\n                return didMove;\r\n            } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\r\n            collide = undefined;\r\n        }\r\n        return didMove;\r\n    }\r\n    /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\r\n    collide(skip, area = skip, skip2) {\r\n        return this.nodes.find(n => n !== skip && n !== skip2 && utils_1.Utils.isIntercepted(n, area));\r\n    }\r\n    collideAll(skip, area = skip, skip2) {\r\n        return this.nodes.filter(n => n !== skip && n !== skip2 && utils_1.Utils.isIntercepted(n, area));\r\n    }\r\n    /** does a pixel coverage collision, returning the node that has the most coverage that is >50% mid line */\r\n    collideCoverage(node, o, collides) {\r\n        if (!o.rect || !node._rect)\r\n            return;\r\n        let r0 = node._rect; // where started\r\n        let r = Object.assign({}, o.rect); // where we are\r\n        // update dragged rect to show where it's coming from (above or below, etc...)\r\n        if (r.y > r0.y) {\r\n            r.h += r.y - r0.y;\r\n            r.y = r0.y;\r\n        }\r\n        else {\r\n            r.h += r0.y - r.y;\r\n        }\r\n        if (r.x > r0.x) {\r\n            r.w += r.x - r0.x;\r\n            r.x = r0.x;\r\n        }\r\n        else {\r\n            r.w += r0.x - r.x;\r\n        }\r\n        let collide;\r\n        collides.forEach(n => {\r\n            if (n.locked || !n._rect)\r\n                return;\r\n            let r2 = n._rect; // overlapping target\r\n            let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE, overMax = 0.5; // need >50%\r\n            // depending on which side we started from, compute the overlap % of coverage\r\n            // (ex: from above/below we only compute the max horizontal line coverage)\r\n            if (r0.y < r2.y) { // from above\r\n                yOver = ((r.y + r.h) - r2.y) / r2.h;\r\n            }\r\n            else if (r0.y + r0.h > r2.y + r2.h) { // from below\r\n                yOver = ((r2.y + r2.h) - r.y) / r2.h;\r\n            }\r\n            if (r0.x < r2.x) { // from the left\r\n                xOver = ((r.x + r.w) - r2.x) / r2.w;\r\n            }\r\n            else if (r0.x + r0.w > r2.x + r2.w) { // from the right\r\n                xOver = ((r2.x + r2.w) - r.x) / r2.w;\r\n            }\r\n            let over = Math.min(xOver, yOver);\r\n            if (over > overMax) {\r\n                overMax = over;\r\n                collide = n;\r\n            }\r\n        });\r\n        return collide;\r\n    }\r\n    /** called to cache the nodes pixel rectangles used for collision detection during drag */\r\n    cacheRects(w, h, top, right, bottom, left) {\r\n        this.nodes.forEach(n => n._rect = {\r\n            y: n.y * h + top,\r\n            x: n.x * w + left,\r\n            w: n.w * w - left - right,\r\n            h: n.h * h - top - bottom\r\n        });\r\n        return this;\r\n    }\r\n    /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\r\n    swap(a, b) {\r\n        if (!b || b.locked || !a || a.locked)\r\n            return false;\r\n        function _doSwap() {\r\n            let x = b.x, y = b.y;\r\n            b.x = a.x;\r\n            b.y = a.y; // b -> a position\r\n            if (a.h != b.h) {\r\n                a.x = x;\r\n                a.y = b.y + b.h; // a -> goes after b\r\n            }\r\n            else if (a.w != b.w) {\r\n                a.x = b.x + b.w;\r\n                a.y = y; // a -> goes after b\r\n            }\r\n            else {\r\n                a.x = x;\r\n                a.y = y; // a -> old b position\r\n            }\r\n            a._dirty = b._dirty = true;\r\n            return true;\r\n        }\r\n        let touching; // remember if we called it (vs undefined)\r\n        // same size and same row or column, and touching\r\n        if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = utils_1.Utils.isTouching(a, b)))\r\n            return _doSwap();\r\n        if (touching === false)\r\n            return; // IFF ran test and fail, bail out\r\n        // check for taking same columns (but different height) and touching\r\n        if (a.w === b.w && a.x === b.x && (touching || (touching = utils_1.Utils.isTouching(a, b)))) {\r\n            if (b.y < a.y) {\r\n                let t = a;\r\n                a = b;\r\n                b = t;\r\n            } // swap a <-> b vars so a is first\r\n            return _doSwap();\r\n        }\r\n        if (touching === false)\r\n            return;\r\n        // check if taking same row (but different width) and touching\r\n        if (a.h === b.h && a.y === b.y && (touching || (touching = utils_1.Utils.isTouching(a, b)))) {\r\n            if (b.x < a.x) {\r\n                let t = a;\r\n                a = b;\r\n                b = t;\r\n            } // swap a <-> b vars so a is first\r\n            return _doSwap();\r\n        }\r\n        return false;\r\n    }\r\n    isAreaEmpty(x, y, w, h) {\r\n        let nn = { x: x || 0, y: y || 0, w: w || 1, h: h || 1 };\r\n        return !this.collide(nn);\r\n    }\r\n    /** re-layout grid items to reclaim any empty space */\r\n    compact() {\r\n        if (this.nodes.length === 0)\r\n            return this;\r\n        this.batchUpdate()\r\n            ._sortNodes();\r\n        let copyNodes = this.nodes;\r\n        this.nodes = []; // pretend we have no nodes to conflict layout to start with...\r\n        copyNodes.forEach(node => {\r\n            if (!node.locked) {\r\n                node.autoPosition = true;\r\n            }\r\n            this.addNode(node, false); // 'false' for add event trigger\r\n            node._dirty = true; // will force attr update\r\n        });\r\n        return this.commit();\r\n    }\r\n    /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\r\n    set float(val) {\r\n        if (this._float === val)\r\n            return;\r\n        this._float = val || false;\r\n        if (!val) {\r\n            this._packNodes()._notify();\r\n        }\r\n    }\r\n    /** float getter method */\r\n    get float() { return this._float || false; }\r\n    /** @internal */\r\n    _sortNodes(dir) {\r\n        this.nodes = utils_1.Utils.sort(this.nodes, dir, this.column);\r\n        return this;\r\n    }\r\n    /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\r\n    _packNodes() {\r\n        if (this.batchMode) {\r\n            return this;\r\n        }\r\n        this._sortNodes(); // first to last\r\n        if (this.float) {\r\n            // restore original Y pos\r\n            this.nodes.forEach(n => {\r\n                if (n._updating || n._orig === undefined || n.y === n._orig.y)\r\n                    return;\r\n                let newY = n.y;\r\n                while (newY > n._orig.y) {\r\n                    --newY;\r\n                    let collide = this.collide(n, { x: n.x, y: newY, w: n.w, h: n.h });\r\n                    if (!collide) {\r\n                        n._dirty = true;\r\n                        n.y = newY;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            // top gravity pack\r\n            this.nodes.forEach((n, i) => {\r\n                if (n.locked)\r\n                    return;\r\n                while (n.y > 0) {\r\n                    let newY = i === 0 ? 0 : n.y - 1;\r\n                    let canBeMoved = i === 0 || !this.collide(n, { x: n.x, y: newY, w: n.w, h: n.h });\r\n                    if (!canBeMoved)\r\n                        break;\r\n                    // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\r\n                    // and move items back. The user 'change' CB should detect changes from the original\r\n                    // starting position instead.\r\n                    n._dirty = (n.y !== newY);\r\n                    n.y = newY;\r\n                }\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * given a random node, makes sure it's coordinates/values are valid in the current grid\r\n     * @param node to adjust\r\n     * @param resizing if out of bound, resize down or move into the grid to fit ?\r\n     */\r\n    prepareNode(node, resizing) {\r\n        node = node || {};\r\n        node._id = node._id || GridStackEngine._idSeq++;\r\n        // if we're missing position, have the grid position us automatically (before we set them to 0,0)\r\n        if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\r\n            node.autoPosition = true;\r\n        }\r\n        // assign defaults for missing required fields\r\n        let defaults = { x: 0, y: 0, w: 1, h: 1 };\r\n        utils_1.Utils.defaults(node, defaults);\r\n        if (!node.autoPosition) {\r\n            delete node.autoPosition;\r\n        }\r\n        if (!node.noResize) {\r\n            delete node.noResize;\r\n        }\r\n        if (!node.noMove) {\r\n            delete node.noMove;\r\n        }\r\n        // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\r\n        if (typeof node.x == 'string') {\r\n            node.x = Number(node.x);\r\n        }\r\n        if (typeof node.y == 'string') {\r\n            node.y = Number(node.y);\r\n        }\r\n        if (typeof node.w == 'string') {\r\n            node.w = Number(node.w);\r\n        }\r\n        if (typeof node.h == 'string') {\r\n            node.h = Number(node.h);\r\n        }\r\n        if (isNaN(node.x)) {\r\n            node.x = defaults.x;\r\n            node.autoPosition = true;\r\n        }\r\n        if (isNaN(node.y)) {\r\n            node.y = defaults.y;\r\n            node.autoPosition = true;\r\n        }\r\n        if (isNaN(node.w)) {\r\n            node.w = defaults.w;\r\n        }\r\n        if (isNaN(node.h)) {\r\n            node.h = defaults.h;\r\n        }\r\n        return this.nodeBoundFix(node, resizing);\r\n    }\r\n    /** part2 of preparing a node to fit inside our grid - checks  for x,y from grid dimensions */\r\n    nodeBoundFix(node, resizing) {\r\n        let before = node._orig || utils_1.Utils.copyPos({}, node);\r\n        if (node.maxW) {\r\n            node.w = Math.min(node.w, node.maxW);\r\n        }\r\n        if (node.maxH) {\r\n            node.h = Math.min(node.h, node.maxH);\r\n        }\r\n        if (node.minW && node.minW <= this.column) {\r\n            node.w = Math.max(node.w, node.minW);\r\n        }\r\n        if (node.minH) {\r\n            node.h = Math.max(node.h, node.minH);\r\n        }\r\n        if (node.w > this.column) {\r\n            // if user loaded a larger than allowed widget for current # of columns,\r\n            // remember it's full width so we can restore back (1 -> 12 column) #1655\r\n            // IFF we're not in the middle of column resizing!\r\n            if (this.column < 12 && !this._inColumnResize) {\r\n                node.w = Math.min(12, node.w);\r\n                this.cacheOneLayout(node, 12);\r\n            }\r\n            node.w = this.column;\r\n        }\r\n        else if (node.w < 1) {\r\n            node.w = 1;\r\n        }\r\n        if (this.maxRow && node.h > this.maxRow) {\r\n            node.h = this.maxRow;\r\n        }\r\n        else if (node.h < 1) {\r\n            node.h = 1;\r\n        }\r\n        if (node.x < 0) {\r\n            node.x = 0;\r\n        }\r\n        if (node.y < 0) {\r\n            node.y = 0;\r\n        }\r\n        if (node.x + node.w > this.column) {\r\n            if (resizing) {\r\n                node.w = this.column - node.x;\r\n            }\r\n            else {\r\n                node.x = this.column - node.w;\r\n            }\r\n        }\r\n        if (this.maxRow && node.y + node.h > this.maxRow) {\r\n            if (resizing) {\r\n                node.h = this.maxRow - node.y;\r\n            }\r\n            else {\r\n                node.y = this.maxRow - node.h;\r\n            }\r\n        }\r\n        if (!utils_1.Utils.samePos(node, before)) {\r\n            node._dirty = true;\r\n        }\r\n        return node;\r\n    }\r\n    getDirtyNodes(verify) {\r\n        // compare original x,y,w,h instead as _dirty can be a temporary state\r\n        if (verify) {\r\n            return this.nodes.filter(n => n._dirty && !utils_1.Utils.samePos(n, n._orig));\r\n        }\r\n        return this.nodes.filter(n => n._dirty);\r\n    }\r\n    /** @internal call this to call onChange CB with dirty nodes */\r\n    _notify(nodes, removeDOM = true) {\r\n        if (this.batchMode)\r\n            return this;\r\n        nodes = (nodes === undefined ? [] : (Array.isArray(nodes) ? nodes : [nodes]));\r\n        let dirtyNodes = nodes.concat(this.getDirtyNodes());\r\n        this.onChange && this.onChange(dirtyNodes, removeDOM);\r\n        return this;\r\n    }\r\n    /** @internal remove dirty and last tried info */\r\n    cleanNodes() {\r\n        if (this.batchMode)\r\n            return this;\r\n        this.nodes.forEach(n => {\r\n            delete n._dirty;\r\n            delete n._lastTried;\r\n        });\r\n        return this;\r\n    }\r\n    /** @internal called to save initial position/size to track real dirty state.\r\n     * Note: should be called right after we call change event (so next API is can detect changes)\r\n     * as well as right before we start move/resize/enter (so we can restore items to prev values) */\r\n    saveInitial() {\r\n        this.nodes.forEach(n => {\r\n            n._orig = utils_1.Utils.copyPos({}, n);\r\n            delete n._dirty;\r\n        });\r\n        this._hasLocked = this.nodes.some(n => n.locked);\r\n        return this;\r\n    }\r\n    /** @internal restore all the nodes back to initial values (called when we leave) */\r\n    restoreInitial() {\r\n        this.nodes.forEach(n => {\r\n            if (utils_1.Utils.samePos(n, n._orig))\r\n                return;\r\n            utils_1.Utils.copyPos(n, n._orig);\r\n            n._dirty = true;\r\n        });\r\n        this._notify();\r\n        return this;\r\n    }\r\n    /** call to add the given node to our list, fixing collision and re-packing */\r\n    addNode(node, triggerAddEvent = false) {\r\n        let dup = this.nodes.find(n => n._id === node._id);\r\n        if (dup)\r\n            return dup; // prevent inserting twice! return it instead.\r\n        // skip prepareNode if we're in middle of column resize (not new) but do check for bounds!\r\n        node = this._inColumnResize ? this.nodeBoundFix(node) : this.prepareNode(node);\r\n        delete node._temporaryRemoved;\r\n        delete node._removeDOM;\r\n        if (node.autoPosition) {\r\n            this._sortNodes();\r\n            for (let i = 0;; ++i) {\r\n                let x = i % this.column;\r\n                let y = Math.floor(i / this.column);\r\n                if (x + node.w > this.column) {\r\n                    continue;\r\n                }\r\n                let box = { x, y, w: node.w, h: node.h };\r\n                if (!this.nodes.find(n => utils_1.Utils.isIntercepted(box, n))) {\r\n                    node.x = x;\r\n                    node.y = y;\r\n                    delete node.autoPosition; // found our slot\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this.nodes.push(node);\r\n        if (triggerAddEvent) {\r\n            this.addedNodes.push(node);\r\n        }\r\n        this._fixCollisions(node);\r\n        if (!this.batchMode) {\r\n            this._packNodes()._notify();\r\n        }\r\n        return node;\r\n    }\r\n    removeNode(node, removeDOM = true, triggerEvent = false) {\r\n        if (!this.nodes.find(n => n === node)) {\r\n            // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\r\n            return this;\r\n        }\r\n        if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\r\n            this.removedNodes.push(node);\r\n        }\r\n        if (removeDOM)\r\n            node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\r\n        // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\r\n        this.nodes = this.nodes.filter(n => n !== node);\r\n        return this._packNodes()\r\n            ._notify(node);\r\n    }\r\n    removeAll(removeDOM = true) {\r\n        delete this._layouts;\r\n        if (this.nodes.length === 0)\r\n            return this;\r\n        removeDOM && this.nodes.forEach(n => n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\r\n        this.removedNodes = this.nodes;\r\n        this.nodes = [];\r\n        return this._notify(this.removedNodes);\r\n    }\r\n    /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\r\n     * In more complicated cases (maxRow) it will attempt at moving the item and fixing\r\n     * others in a clone first, then apply those changes if still within specs. */\r\n    moveNodeCheck(node, o) {\r\n        // if (node.locked) return false;\r\n        if (!this.changedPosConstrain(node, o))\r\n            return false;\r\n        o.pack = true;\r\n        // simpler case: move item directly...\r\n        if (!this.maxRow /* && !this._hasLocked*/) {\r\n            return this.moveNode(node, o);\r\n        }\r\n        // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\r\n        let clonedNode;\r\n        let clone = new GridStackEngine({\r\n            column: this.column,\r\n            float: this.float,\r\n            nodes: this.nodes.map(n => {\r\n                if (n === node) {\r\n                    clonedNode = Object.assign({}, n);\r\n                    return clonedNode;\r\n                }\r\n                return Object.assign({}, n);\r\n            })\r\n        });\r\n        if (!clonedNode)\r\n            return false;\r\n        let canMove = clone.moveNode(clonedNode, o);\r\n        // if maxRow make sure we are still valid size\r\n        if (this.maxRow && canMove) {\r\n            canMove = (clone.getRow() <= this.maxRow);\r\n            // turns out we can't grow, then see if we can swap instead (ex: full grid) if we're not resizing\r\n            if (!canMove && !o.resizing) {\r\n                let collide = this.collide(node, o);\r\n                if (collide && this.swap(node, collide)) {\r\n                    this._notify();\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        if (!canMove)\r\n            return false;\r\n        // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\r\n        // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\r\n        clone.nodes.filter(n => n._dirty).forEach(c => {\r\n            let n = this.nodes.find(a => a._id === c._id);\r\n            if (!n)\r\n                return;\r\n            utils_1.Utils.copyPos(n, c);\r\n            n._dirty = true;\r\n        });\r\n        this._notify();\r\n        return true;\r\n    }\r\n    /** return true if can fit in grid height constrain only (always true if no maxRow) */\r\n    willItFit(node) {\r\n        delete node._willFitPos;\r\n        if (!this.maxRow)\r\n            return true;\r\n        // create a clone with NO maxRow and check if still within size\r\n        let clone = new GridStackEngine({\r\n            column: this.column,\r\n            float: this.float,\r\n            nodes: this.nodes.map(n => { return Object.assign({}, n); })\r\n        });\r\n        let n = Object.assign({}, node); // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\r\n        this.cleanupNode(n);\r\n        delete n.el;\r\n        delete n._id;\r\n        delete n.content;\r\n        delete n.grid;\r\n        clone.addNode(n);\r\n        if (clone.getRow() <= this.maxRow) {\r\n            node._willFitPos = utils_1.Utils.copyPos({}, n);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /** true if x,y or w,h are different after clamping to min/max */\r\n    changedPosConstrain(node, p) {\r\n        // make sure w,h are set\r\n        p.w = p.w || node.w;\r\n        p.h = p.h || node.h;\r\n        if (node.x !== p.x || node.y !== p.y)\r\n            return true;\r\n        // check constrained w,h\r\n        if (node.maxW) {\r\n            p.w = Math.min(p.w, node.maxW);\r\n        }\r\n        if (node.maxH) {\r\n            p.h = Math.min(p.h, node.maxH);\r\n        }\r\n        if (node.minW) {\r\n            p.w = Math.max(p.w, node.minW);\r\n        }\r\n        if (node.minH) {\r\n            p.h = Math.max(p.h, node.minH);\r\n        }\r\n        return (node.w !== p.w || node.h !== p.h);\r\n    }\r\n    /** return true if the passed in node was actually moved (checks for no-op and locked) */\r\n    moveNode(node, o) {\r\n        if (!node || /*node.locked ||*/ !o)\r\n            return false;\r\n        if (o.pack === undefined)\r\n            o.pack = true;\r\n        // constrain the passed in values and check if we're still changing our node\r\n        if (typeof o.x !== 'number') {\r\n            o.x = node.x;\r\n        }\r\n        if (typeof o.y !== 'number') {\r\n            o.y = node.y;\r\n        }\r\n        if (typeof o.w !== 'number') {\r\n            o.w = node.w;\r\n        }\r\n        if (typeof o.h !== 'number') {\r\n            o.h = node.h;\r\n        }\r\n        let resizing = (node.w !== o.w || node.h !== o.h);\r\n        let nn = utils_1.Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\r\n        utils_1.Utils.copyPos(nn, o);\r\n        nn = this.nodeBoundFix(nn, resizing);\r\n        utils_1.Utils.copyPos(o, nn);\r\n        if (utils_1.Utils.samePos(node, o))\r\n            return false;\r\n        let prevPos = utils_1.Utils.copyPos({}, node);\r\n        // during while() collisions make sure to check entire row so larger items don't leap frog small ones (push them all down)\r\n        let area = nn;\r\n        // if (this._useEntireRowArea(node, nn)) {\r\n        //   area = {x: 0, w: this.column, y: nn.y, h: nn.h};\r\n        // }\r\n        // check if we will need to fix collision at our new location\r\n        let collides = this.collideAll(node, area, o.skip);\r\n        let needToMove = true;\r\n        if (collides.length) {\r\n            // now check to make sure we actually collided over 50% surface area while dragging\r\n            let collide = node._moving && !o.nested ? this.collideCoverage(node, o, collides) : collides[0];\r\n            if (collide) {\r\n                needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\r\n            }\r\n            else {\r\n                needToMove = false; // we didn't cover >50% for a move, skip...\r\n            }\r\n        }\r\n        // now move (to the original ask vs the collision version which might differ) and repack things\r\n        if (needToMove) {\r\n            node._dirty = true;\r\n            utils_1.Utils.copyPos(node, nn);\r\n        }\r\n        if (o.pack) {\r\n            this._packNodes()\r\n                ._notify();\r\n        }\r\n        return !utils_1.Utils.samePos(node, prevPos); // pack might have moved things back\r\n    }\r\n    getRow() {\r\n        return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);\r\n    }\r\n    beginUpdate(node) {\r\n        if (!node._updating) {\r\n            node._updating = true;\r\n            delete node._skipDown;\r\n            if (!this.batchMode)\r\n                this.saveInitial();\r\n        }\r\n        return this;\r\n    }\r\n    endUpdate() {\r\n        let n = this.nodes.find(n => n._updating);\r\n        if (n) {\r\n            delete n._updating;\r\n            delete n._skipDown;\r\n        }\r\n        return this;\r\n    }\r\n    /** saves a copy of the largest column layout (eg 12 even when rendering oneColumnMode, so we don't loose orig layout),\r\n     * returning a list of widgets for serialization */\r\n    save(saveElement = true) {\r\n        var _a;\r\n        // use the highest layout for any saved info so we can have full detail on reload #1849\r\n        let len = (_a = this._layouts) === null || _a === void 0 ? void 0 : _a.length;\r\n        let layout = len && this.column !== (len - 1) ? this._layouts[len - 1] : null;\r\n        let list = [];\r\n        this._sortNodes();\r\n        this.nodes.forEach(n => {\r\n            let wl = layout === null || layout === void 0 ? void 0 : layout.find(l => l._id === n._id);\r\n            let w = Object.assign({}, n);\r\n            // use layout info instead if set\r\n            if (wl) {\r\n                w.x = wl.x;\r\n                w.y = wl.y;\r\n                w.w = wl.w;\r\n            }\r\n            // delete internals\r\n            for (let key in w) {\r\n                if (key[0] === '_' || w[key] === null || w[key] === undefined)\r\n                    delete w[key];\r\n            }\r\n            delete w.grid;\r\n            if (!saveElement)\r\n                delete w.el;\r\n            // delete default values (will be re-created on read)\r\n            if (!w.autoPosition)\r\n                delete w.autoPosition;\r\n            if (!w.noResize)\r\n                delete w.noResize;\r\n            if (!w.noMove)\r\n                delete w.noMove;\r\n            if (!w.locked)\r\n                delete w.locked;\r\n            list.push(w);\r\n        });\r\n        return list;\r\n    }\r\n    /** @internal called whenever a node is added or moved - updates the cached layouts */\r\n    layoutsNodesChange(nodes) {\r\n        if (!this._layouts || this._inColumnResize)\r\n            return this;\r\n        // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\r\n        this._layouts.forEach((layout, column) => {\r\n            if (!layout || column === this.column)\r\n                return this;\r\n            if (column < this.column) {\r\n                this._layouts[column] = undefined;\r\n            }\r\n            else {\r\n                // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\r\n                // NOTE: we don't need to check against out of bound scaling/moving as that will be done when using those cache values. #1785\r\n                let ratio = column / this.column;\r\n                nodes.forEach(node => {\r\n                    if (!node._orig)\r\n                        return; // didn't change (newly added ?)\r\n                    let n = layout.find(l => l._id === node._id);\r\n                    if (!n)\r\n                        return; // no cache for new nodes. Will use those values.\r\n                    // Y changed, push down same amount\r\n                    // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\r\n                    if (node.y !== node._orig.y) {\r\n                        n.y += (node.y - node._orig.y);\r\n                    }\r\n                    // X changed, scale from new position\r\n                    if (node.x !== node._orig.x) {\r\n                        n.x = Math.round(node.x * ratio);\r\n                    }\r\n                    // width changed, scale from new width\r\n                    if (node.w !== node._orig.w) {\r\n                        n.w = Math.round(node.w * ratio);\r\n                    }\r\n                    // ...height always carries over from cache\r\n                });\r\n            }\r\n        });\r\n        return this;\r\n    }\r\n    /**\r\n     * @internal Called to scale the widget width & position up/down based on the column change.\r\n     * Note we store previous layouts (especially original ones) to make it possible to go\r\n     * from say 12 -> 1 -> 12 and get back to where we were.\r\n     *\r\n     * @param prevColumn previous number of columns\r\n     * @param column  new column number\r\n     * @param nodes different sorted list (ex: DOM order) instead of current list\r\n     * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n     * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n     */\r\n    updateNodeWidths(prevColumn, column, nodes, layout = 'moveScale') {\r\n        var _a;\r\n        if (!this.nodes.length || !column || prevColumn === column)\r\n            return this;\r\n        // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data\r\n        this.cacheLayout(this.nodes, prevColumn);\r\n        this.batchUpdate(); // do this EARLY as it will call saveInitial() so we can detect where we started for _dirty and collision\r\n        let newNodes = [];\r\n        // if we're going to 1 column and using DOM order rather than default sorting, then generate that layout\r\n        let domOrder = false;\r\n        if (column === 1 && (nodes === null || nodes === void 0 ? void 0 : nodes.length)) {\r\n            domOrder = true;\r\n            let top = 0;\r\n            nodes.forEach(n => {\r\n                n.x = 0;\r\n                n.w = 1;\r\n                n.y = Math.max(n.y, top);\r\n                top = n.y + n.h;\r\n            });\r\n            newNodes = nodes;\r\n            nodes = [];\r\n        }\r\n        else {\r\n            nodes = utils_1.Utils.sort(this.nodes, -1, prevColumn); // current column reverse sorting so we can insert last to front (limit collision)\r\n        }\r\n        // see if we have cached previous layout IFF we are going up in size (restore) otherwise always\r\n        // generate next size down from where we are (looks more natural as you gradually size down).\r\n        let cacheNodes = [];\r\n        if (column > prevColumn) {\r\n            cacheNodes = this._layouts[column] || [];\r\n            // ...if not, start with the largest layout (if not already there) as down-scaling is more accurate\r\n            // by pretending we came from that larger column by assigning those values as starting point\r\n            let lastIndex = this._layouts.length - 1;\r\n            if (!cacheNodes.length && prevColumn !== lastIndex && ((_a = this._layouts[lastIndex]) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                prevColumn = lastIndex;\r\n                this._layouts[lastIndex].forEach(cacheNode => {\r\n                    let n = nodes.find(n => n._id === cacheNode._id);\r\n                    if (n) {\r\n                        // still current, use cache info positions\r\n                        n.x = cacheNode.x;\r\n                        n.y = cacheNode.y;\r\n                        n.w = cacheNode.w;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        // if we found cache re-use those nodes that are still current\r\n        cacheNodes.forEach(cacheNode => {\r\n            let j = nodes.findIndex(n => n._id === cacheNode._id);\r\n            if (j !== -1) {\r\n                // still current, use cache info positions\r\n                nodes[j].x = cacheNode.x;\r\n                nodes[j].y = cacheNode.y;\r\n                nodes[j].w = cacheNode.w;\r\n                newNodes.push(nodes[j]);\r\n                nodes.splice(j, 1);\r\n            }\r\n        });\r\n        // ...and add any extra non-cached ones\r\n        if (nodes.length) {\r\n            if (typeof layout === 'function') {\r\n                layout(column, prevColumn, newNodes, nodes);\r\n            }\r\n            else if (!domOrder) {\r\n                let ratio = column / prevColumn;\r\n                let move = (layout === 'move' || layout === 'moveScale');\r\n                let scale = (layout === 'scale' || layout === 'moveScale');\r\n                nodes.forEach(node => {\r\n                    // NOTE: x + w could be outside of the grid, but addNode() below will handle that\r\n                    node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\r\n                    node.w = ((column === 1 || prevColumn === 1) ? 1 :\r\n                        scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\r\n                    newNodes.push(node);\r\n                });\r\n                nodes = [];\r\n            }\r\n        }\r\n        // finally re-layout them in reverse order (to get correct placement)\r\n        newNodes = utils_1.Utils.sort(newNodes, -1, column);\r\n        this._inColumnResize = true; // prevent cache update\r\n        this.nodes = []; // pretend we have no nodes to start with (add() will use same structures) to simplify layout\r\n        newNodes.forEach(node => {\r\n            this.addNode(node, false); // 'false' for add event trigger\r\n            delete node._orig; // make sure the commit doesn't try to restore things back to original\r\n        });\r\n        this.commit();\r\n        delete this._inColumnResize;\r\n        return this;\r\n    }\r\n    /**\r\n     * call to cache the given layout internally to the given location so we can restore back when column changes size\r\n     * @param nodes list of nodes\r\n     * @param column corresponding column index to save it under\r\n     * @param clear if true, will force other caches to be removed (default false)\r\n     */\r\n    cacheLayout(nodes, column, clear = false) {\r\n        let copy = [];\r\n        nodes.forEach((n, i) => {\r\n            n._id = n._id || GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\r\n            copy[i] = { x: n.x, y: n.y, w: n.w, _id: n._id }; // only thing we change is x,y,w and id to find it back\r\n        });\r\n        this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\r\n        this._layouts[column] = copy;\r\n        return this;\r\n    }\r\n    /**\r\n     * call to cache the given node layout internally to the given location so we can restore back when column changes size\r\n     * @param node single node to cache\r\n     * @param column corresponding column index to save it under\r\n     */\r\n    cacheOneLayout(n, column) {\r\n        n._id = n._id || GridStackEngine._idSeq++;\r\n        let layout = { x: n.x, y: n.y, w: n.w, _id: n._id };\r\n        this._layouts = this._layouts || [];\r\n        this._layouts[column] = this._layouts[column] || [];\r\n        let index = this._layouts[column].findIndex(l => l._id === n._id);\r\n        index === -1 ? this._layouts[column].push(layout) : this._layouts[column][index] = layout;\r\n        return this;\r\n    }\r\n    /** called to remove all internal values but the _id */\r\n    cleanupNode(node) {\r\n        for (let prop in node) {\r\n            if (prop[0] === '_' && prop !== '_id')\r\n                delete node[prop];\r\n        }\r\n        return this;\r\n    }\r\n}\r\nexports.GridStackEngine = GridStackEngine;\r\n/** @internal unique global internal _id counter NOT starting at 0 */\r\nGridStackEngine._idSeq = 1;\r\n//# sourceMappingURL=gridstack-engine.js.map","\"use strict\";\r\n/**\r\n * dd-base-impl.ts 5.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DDBaseImplement = void 0;\r\nclass DDBaseImplement {\r\n    constructor() {\r\n        /** @internal */\r\n        this._disabled = false;\r\n        /** @internal */\r\n        this._eventRegister = {};\r\n    }\r\n    /** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */\r\n    get disabled() { return this._disabled; }\r\n    on(event, callback) {\r\n        this._eventRegister[event] = callback;\r\n    }\r\n    off(event) {\r\n        delete this._eventRegister[event];\r\n    }\r\n    enable() {\r\n        this._disabled = false;\r\n    }\r\n    disable() {\r\n        this._disabled = true;\r\n    }\r\n    destroy() {\r\n        delete this._eventRegister;\r\n    }\r\n    triggerEvent(eventName, event) {\r\n        if (!this.disabled && this._eventRegister && this._eventRegister[eventName])\r\n            return this._eventRegister[eventName](event);\r\n    }\r\n}\r\nexports.DDBaseImplement = DDBaseImplement;\r\n//# sourceMappingURL=dd-base-impl.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DDUtils = void 0;\r\n/**\r\n * dd-utils.ts 5.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\nclass DDUtils {\r\n    static clone(el) {\r\n        const node = el.cloneNode(true);\r\n        node.removeAttribute('id');\r\n        return node;\r\n    }\r\n    static appendTo(el, parent) {\r\n        let parentNode;\r\n        if (typeof parent === 'string') {\r\n            parentNode = document.querySelector(parent);\r\n        }\r\n        else {\r\n            parentNode = parent;\r\n        }\r\n        if (parentNode) {\r\n            parentNode.appendChild(el);\r\n        }\r\n    }\r\n    static setPositionRelative(el) {\r\n        if (!(/^(?:r|a|f)/).test(window.getComputedStyle(el).position)) {\r\n            el.style.position = \"relative\";\r\n        }\r\n    }\r\n    static addElStyles(el, styles) {\r\n        if (styles instanceof Object) {\r\n            for (const s in styles) {\r\n                if (styles.hasOwnProperty(s)) {\r\n                    if (Array.isArray(styles[s])) {\r\n                        // support fallback value\r\n                        styles[s].forEach(val => {\r\n                            el.style[s] = val;\r\n                        });\r\n                    }\r\n                    else {\r\n                        el.style[s] = styles[s];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    static initEvent(e, info) {\r\n        const evt = { type: info.type };\r\n        const obj = {\r\n            button: 0,\r\n            which: 0,\r\n            buttons: 1,\r\n            bubbles: true,\r\n            cancelable: true,\r\n            target: info.target ? info.target : e.target\r\n        };\r\n        // don't check for `instanceof DragEvent` as Safari use MouseEvent #1540\r\n        if (e.dataTransfer) {\r\n            evt['dataTransfer'] = e.dataTransfer; // workaround 'readonly' field.\r\n        }\r\n        ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].forEach(p => evt[p] = e[p]); // keys\r\n        ['pageX', 'pageY', 'clientX', 'clientY', 'screenX', 'screenY'].forEach(p => evt[p] = e[p]); // point info\r\n        return Object.assign(Object.assign({}, evt), obj);\r\n    }\r\n    /** returns true if event is inside the given element rectangle */\r\n    // Note: Safari Mac has null event.relatedTarget which causes #1684 so check if DragEvent is inside the coordinates instead\r\n    //    this.el.contains(event.relatedTarget as HTMLElement)\r\n    static inside(e, el) {\r\n        // srcElement, toElement, target: all set to placeholder when leaving simple grid, so we can't use that (Chrome)\r\n        let target = e.relatedTarget || e.fromElement;\r\n        if (!target) {\r\n            const { bottom, left, right, top } = el.getBoundingClientRect();\r\n            return (e.x < right && e.x > left && e.y < bottom && e.y > top);\r\n        }\r\n        return el.contains(target);\r\n    }\r\n}\r\nexports.DDUtils = DDUtils;\r\nDDUtils.isEventSupportPassiveOption = ((() => {\r\n    let supportsPassive = false;\r\n    let passiveTest = () => {\r\n        // do nothing\r\n    };\r\n    document.addEventListener('test', passiveTest, {\r\n        get passive() {\r\n            supportsPassive = true;\r\n            return true;\r\n        }\r\n    });\r\n    document.removeEventListener('test', passiveTest);\r\n    return supportsPassive;\r\n})());\r\n//# sourceMappingURL=dd-utils.js.map","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GridStack = void 0;\r\n/*!\r\n * GridStack 5.0\r\n * https://gridstackjs.com/\r\n *\r\n * Copyright (c) 2021 Alain Dumesny\r\n * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE\r\n */\r\nconst gridstack_engine_1 = require(\"./gridstack-engine\");\r\nconst utils_1 = require(\"./utils\");\r\nconst gridstack_ddi_1 = require(\"./gridstack-ddi\");\r\n// export all dependent file as well to make it easier for users to just import the main file\r\n__exportStar(require(\"./types\"), exports);\r\n__exportStar(require(\"./utils\"), exports);\r\n__exportStar(require(\"./gridstack-engine\"), exports);\r\n__exportStar(require(\"./gridstack-ddi\"), exports);\r\n// default values for grid options - used during init and when saving out\r\nconst GridDefaults = {\r\n    column: 12,\r\n    minRow: 0,\r\n    maxRow: 0,\r\n    itemClass: 'grid-stack-item',\r\n    placeholderClass: 'grid-stack-placeholder',\r\n    placeholderText: '',\r\n    handle: '.grid-stack-item-content',\r\n    handleClass: null,\r\n    styleInHead: false,\r\n    cellHeight: 'auto',\r\n    cellHeightThrottle: 100,\r\n    margin: 10,\r\n    auto: true,\r\n    minWidth: 768,\r\n    float: false,\r\n    staticGrid: false,\r\n    animate: true,\r\n    alwaysShowResizeHandle: false,\r\n    resizable: {\r\n        autoHide: true,\r\n        handles: 'se'\r\n    },\r\n    draggable: {\r\n        handle: '.grid-stack-item-content',\r\n        scroll: false,\r\n        appendTo: 'body'\r\n    },\r\n    disableDrag: false,\r\n    disableResize: false,\r\n    rtl: 'auto',\r\n    removable: false,\r\n    removableOptions: {\r\n        accept: '.grid-stack-item'\r\n    },\r\n    marginUnit: 'px',\r\n    cellHeightUnit: 'px',\r\n    disableOneColumnMode: false,\r\n    oneColumnModeDomSort: false\r\n};\r\n/**\r\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\r\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\r\n * @example\r\n * <div class=\"grid-stack\">\r\n *   <div class=\"grid-stack-item\">\r\n *     <div class=\"grid-stack-item-content\">Item 1</div>\r\n *   </div>\r\n * </div>\r\n */\r\nclass GridStack {\r\n    /**\r\n     * Construct a grid item from the given element and options\r\n     * @param el\r\n     * @param opts\r\n     */\r\n    constructor(el, opts = {}) {\r\n        /** @internal */\r\n        this._gsEventHandler = {};\r\n        /** @internal extra row added when dragging at the bottom of the grid */\r\n        this._extraDragRow = 0;\r\n        this.el = el; // exposed HTML element to the user\r\n        opts = opts || {}; // handles null/undefined/0\r\n        // if row property exists, replace minRow and maxRow instead\r\n        if (opts.row) {\r\n            opts.minRow = opts.maxRow = opts.row;\r\n            delete opts.row;\r\n        }\r\n        let rowAttr = utils_1.Utils.toNumber(el.getAttribute('gs-row'));\r\n        // flag only valid in sub-grids (handled by parent, not here)\r\n        if (opts.column === 'auto') {\r\n            delete opts.column;\r\n        }\r\n        // elements attributes override any passed options (like CSS style) - merge the two together\r\n        let defaults = Object.assign(Object.assign({}, utils_1.Utils.cloneDeep(GridDefaults)), { column: utils_1.Utils.toNumber(el.getAttribute('gs-column')) || 12, minRow: rowAttr ? rowAttr : utils_1.Utils.toNumber(el.getAttribute('gs-min-row')) || 0, maxRow: rowAttr ? rowAttr : utils_1.Utils.toNumber(el.getAttribute('gs-max-row')) || 0, staticGrid: utils_1.Utils.toBool(el.getAttribute('gs-static')) || false, _styleSheetClass: 'grid-stack-instance-' + (Math.random() * 10000).toFixed(0), alwaysShowResizeHandle: opts.alwaysShowResizeHandle || false, resizable: {\r\n                autoHide: !(opts.alwaysShowResizeHandle || false),\r\n                handles: 'se'\r\n            }, draggable: {\r\n                handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || '.grid-stack-item-content',\r\n                scroll: false,\r\n                appendTo: 'body'\r\n            }, removableOptions: {\r\n                accept: '.' + (opts.itemClass || 'grid-stack-item')\r\n            } });\r\n        if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead\r\n            defaults.animate = utils_1.Utils.toBool(el.getAttribute('gs-animate'));\r\n        }\r\n        this.opts = utils_1.Utils.defaults(opts, defaults);\r\n        opts = null; // make sure we use this.opts instead\r\n        this.initMargin(); // part of settings defaults...\r\n        // Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)\r\n        if (this.opts.column !== 1 && !this.opts.disableOneColumnMode && this._widthOrContainer() <= this.opts.minWidth) {\r\n            this._prevColumn = this.getColumn();\r\n            this.opts.column = 1;\r\n        }\r\n        if (this.opts.rtl === 'auto') {\r\n            this.opts.rtl = (el.style.direction === 'rtl');\r\n        }\r\n        if (this.opts.rtl) {\r\n            this.el.classList.add('grid-stack-rtl');\r\n        }\r\n        // check if we're been nested, and if so update our style and keep pointer around (used during save)\r\n        let parentGridItemEl = utils_1.Utils.closestByClass(this.el, GridDefaults.itemClass);\r\n        if (parentGridItemEl && parentGridItemEl.gridstackNode) {\r\n            this.opts._isNested = parentGridItemEl.gridstackNode;\r\n            this.opts._isNested.subGrid = this;\r\n            parentGridItemEl.classList.add('grid-stack-nested');\r\n            this.el.classList.add('grid-stack-nested');\r\n        }\r\n        this._isAutoCellHeight = (this.opts.cellHeight === 'auto');\r\n        if (this._isAutoCellHeight || this.opts.cellHeight === 'initial') {\r\n            // make the cell content square initially (will use resize/column event to keep it square)\r\n            this.cellHeight(undefined, false);\r\n        }\r\n        else {\r\n            // append unit if any are set\r\n            if (typeof this.opts.cellHeight == 'number' && this.opts.cellHeightUnit && this.opts.cellHeightUnit !== GridDefaults.cellHeightUnit) {\r\n                this.opts.cellHeight = this.opts.cellHeight + this.opts.cellHeightUnit;\r\n                delete this.opts.cellHeightUnit;\r\n            }\r\n            this.cellHeight(this.opts.cellHeight, false);\r\n        }\r\n        this.el.classList.add(this.opts._styleSheetClass);\r\n        this._setStaticClass();\r\n        this.engine = new gridstack_engine_1.GridStackEngine({\r\n            column: this.getColumn(),\r\n            float: this.opts.float,\r\n            maxRow: this.opts.maxRow,\r\n            onChange: (cbNodes) => {\r\n                let maxH = 0;\r\n                this.engine.nodes.forEach(n => { maxH = Math.max(maxH, n.y + n.h); });\r\n                cbNodes.forEach(n => {\r\n                    let el = n.el;\r\n                    if (!el)\r\n                        return;\r\n                    if (n._removeDOM) {\r\n                        if (el)\r\n                            el.remove();\r\n                        delete n._removeDOM;\r\n                    }\r\n                    else {\r\n                        this._writePosAttr(el, n);\r\n                    }\r\n                });\r\n                this._updateStyles(false, maxH); // false = don't recreate, just append if need be\r\n            }\r\n        });\r\n        if (this.opts.auto) {\r\n            this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...\r\n            let elements = [];\r\n            this.getGridItems().forEach(el => {\r\n                let x = parseInt(el.getAttribute('gs-x'));\r\n                let y = parseInt(el.getAttribute('gs-y'));\r\n                elements.push({\r\n                    el,\r\n                    // if x,y are missing (autoPosition) add them to end of list - but keep their respective DOM order\r\n                    i: (Number.isNaN(x) ? 1000 : x) + (Number.isNaN(y) ? 1000 : y) * this.getColumn()\r\n                });\r\n            });\r\n            elements.sort((a, b) => a.i - b.i).forEach(e => this._prepareElement(e.el));\r\n            this.commit();\r\n        }\r\n        this.setAnimation(this.opts.animate);\r\n        this._updateStyles();\r\n        if (this.opts.column != 12) {\r\n            this.el.classList.add('grid-stack-' + this.opts.column);\r\n        }\r\n        // legacy support to appear 'per grid` options when really global.\r\n        if (this.opts.dragIn)\r\n            GridStack.setupDragIn(this.opts.dragIn, this.opts.dragInOptions);\r\n        delete this.opts.dragIn;\r\n        delete this.opts.dragInOptions;\r\n        this._setupRemoveDrop();\r\n        this._setupAcceptWidget();\r\n        this._updateWindowResizeEvent();\r\n    }\r\n    /**\r\n     * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\r\n     * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\r\n     * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\r\n     * @param options grid options (optional)\r\n     * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\r\n     *\r\n     * @example\r\n     * let grid = GridStack.init();\r\n     *\r\n     * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\r\n     * let grid = document.querySelector('.grid-stack').gridstack;\r\n     */\r\n    static init(options = {}, elOrString = '.grid-stack') {\r\n        let el = GridStack.getGridElement(elOrString);\r\n        if (!el) {\r\n            if (typeof elOrString === 'string') {\r\n                console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' +\r\n                    '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n            }\r\n            else {\r\n                console.error('GridStack.init() no grid element was passed.');\r\n            }\r\n            return null;\r\n        }\r\n        if (!el.gridstack) {\r\n            el.gridstack = new GridStack(el, utils_1.Utils.cloneDeep(options));\r\n        }\r\n        return el.gridstack;\r\n    }\r\n    /**\r\n     * Will initialize a list of elements (given a selector) and return an array of grids.\r\n     * @param options grid options (optional)\r\n     * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\r\n     *\r\n     * @example\r\n     * let grids = GridStack.initAll();\r\n     * grids.forEach(...)\r\n     */\r\n    static initAll(options = {}, selector = '.grid-stack') {\r\n        let grids = [];\r\n        GridStack.getGridElements(selector).forEach(el => {\r\n            if (!el.gridstack) {\r\n                el.gridstack = new GridStack(el, utils_1.Utils.cloneDeep(options));\r\n                delete options.dragIn;\r\n                delete options.dragInOptions; // only need to be done once (really a static global thing, not per grid)\r\n            }\r\n            grids.push(el.gridstack);\r\n        });\r\n        if (grids.length === 0) {\r\n            console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' +\r\n                '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n        }\r\n        return grids;\r\n    }\r\n    /**\r\n     * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\r\n     * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\r\n     * JSON serialized data, including options.\r\n     * @param parent HTML element parent to the grid\r\n     * @param opt grids options used to initialize the grid, and list of children\r\n     */\r\n    static addGrid(parent, opt = {}) {\r\n        if (!parent)\r\n            return null;\r\n        // create the grid element, but check if the passed 'parent' already has grid styling and should be used instead\r\n        let el = parent;\r\n        if (!parent.classList.contains('grid-stack')) {\r\n            let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n            doc.body.innerHTML = `<div class=\"grid-stack ${opt.class || ''}\"></div>`;\r\n            el = doc.body.children[0];\r\n            parent.appendChild(el);\r\n        }\r\n        // create grid class and load any children\r\n        let grid = GridStack.init(opt, el);\r\n        if (grid.opts.children) {\r\n            let children = grid.opts.children;\r\n            delete grid.opts.children;\r\n            grid.load(children);\r\n        }\r\n        return grid;\r\n    }\r\n    /** @internal create placeholder DIV as needed */\r\n    get placeholder() {\r\n        if (!this._placeholder) {\r\n            let placeholderChild = document.createElement('div'); // child so padding match item-content\r\n            placeholderChild.className = 'placeholder-content';\r\n            if (this.opts.placeholderText) {\r\n                placeholderChild.innerHTML = this.opts.placeholderText;\r\n            }\r\n            this._placeholder = document.createElement('div');\r\n            this._placeholder.classList.add(this.opts.placeholderClass, GridDefaults.itemClass, this.opts.itemClass);\r\n            this.placeholder.appendChild(placeholderChild);\r\n        }\r\n        return this._placeholder;\r\n    }\r\n    /**\r\n     * add a new widget and returns it.\r\n     *\r\n     * Widget will be always placed even if result height is more than actual grid height.\r\n     * You need to use `willItFit()` before calling addWidget for additional check.\r\n     * See also `makeWidget()`.\r\n     *\r\n     * @example\r\n     * let grid = GridStack.init();\r\n     * grid.addWidget({w: 3, content: 'hello'});\r\n     * grid.addWidget('<div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">hello</div></div>', {w: 3});\r\n     *\r\n     * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add\r\n     * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\r\n     */\r\n    addWidget(els, options) {\r\n        // support legacy call for now ?\r\n        if (arguments.length > 2) {\r\n            console.warn('gridstack.ts: `addWidget(el, x, y, width...)` is deprecated. Use `addWidget({x, y, w, content, ...})`. It will be removed soon');\r\n            // eslint-disable-next-line prefer-rest-params\r\n            let a = arguments, i = 1, opt = { x: a[i++], y: a[i++], w: a[i++], h: a[i++], autoPosition: a[i++],\r\n                minW: a[i++], maxW: a[i++], minH: a[i++], maxH: a[i++], id: a[i++] };\r\n            return this.addWidget(els, opt);\r\n        }\r\n        function isGridStackWidget(w) {\r\n            return w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;\r\n        }\r\n        let el;\r\n        if (typeof els === 'string') {\r\n            let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n            doc.body.innerHTML = els;\r\n            el = doc.body.children[0];\r\n        }\r\n        else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {\r\n            let content = els ? els.content || '' : '';\r\n            options = els;\r\n            let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n            doc.body.innerHTML = `<div class=\"grid-stack-item ${this.opts.itemClass || ''}\"><div class=\"grid-stack-item-content\">${content}</div></div>`;\r\n            el = doc.body.children[0];\r\n        }\r\n        else {\r\n            el = els;\r\n        }\r\n        // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\r\n        // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz) before adding the node.\r\n        // So make sure we load any DOM attributes that are not specified in passed in options (which override)\r\n        let domAttr = this._readAttr(el);\r\n        options = utils_1.Utils.cloneDeep(options) || {}; // make a copy before we modify in case caller re-uses it\r\n        utils_1.Utils.defaults(options, domAttr);\r\n        let node = this.engine.prepareNode(options);\r\n        this._writeAttr(el, options);\r\n        if (this._insertNotAppend) {\r\n            this.el.prepend(el);\r\n        }\r\n        else {\r\n            this.el.appendChild(el);\r\n        }\r\n        // similar to makeWidget() that doesn't read attr again and worse re-create a new node and loose any _id\r\n        this._prepareElement(el, true, options);\r\n        this._updateContainerHeight();\r\n        // check if nested grid definition is present\r\n        if (node.subGrid && !node.subGrid.el) { // see if there is a sub-grid to create too\r\n            // if column special case it set, remember that flag and set default\r\n            let autoColumn;\r\n            let ops = node.subGrid;\r\n            if (ops.column === 'auto') {\r\n                ops.column = node.w;\r\n                ops.disableOneColumnMode = true; // driven by parent\r\n                autoColumn = true;\r\n            }\r\n            let content = node.el.querySelector('.grid-stack-item-content');\r\n            node.subGrid = GridStack.addGrid(content, node.subGrid);\r\n            if (autoColumn) {\r\n                node.subGrid._autoColumn = true;\r\n            }\r\n        }\r\n        this._triggerAddEvent();\r\n        this._triggerChangeEvent();\r\n        return el;\r\n    }\r\n    /**\r\n    /**\r\n     * saves the current layout returning a list of widgets for serialization which might include any nested grids.\r\n     * @param saveContent if true (default) the latest html inside .grid-stack-content will be saved to GridStackWidget.content field, else it will\r\n     * be removed.\r\n     * @param saveGridOpt if true (default false), save the grid options itself, so you can call the new GridStack.addGrid()\r\n     * to recreate everything from scratch. GridStackOptions.children would then contain the widget list instead.\r\n     * @returns list of widgets or full grid option, including .children list of widgets\r\n     */\r\n    save(saveContent = true, saveGridOpt = false) {\r\n        // return copied nodes we can modify at will...\r\n        let list = this.engine.save(saveContent);\r\n        // check for HTML content and nested grids\r\n        list.forEach(n => {\r\n            if (saveContent && n.el && !n.subGrid) { // sub-grid are saved differently, not plain content\r\n                let sub = n.el.querySelector('.grid-stack-item-content');\r\n                n.content = sub ? sub.innerHTML : undefined;\r\n                if (!n.content)\r\n                    delete n.content;\r\n            }\r\n            else {\r\n                if (!saveContent) {\r\n                    delete n.content;\r\n                }\r\n                // check for nested grid\r\n                if (n.subGrid) {\r\n                    n.subGrid = n.subGrid.save(saveContent, true);\r\n                }\r\n            }\r\n            delete n.el;\r\n        });\r\n        // check if save entire grid options (needed for recursive) + children...\r\n        if (saveGridOpt) {\r\n            let o = utils_1.Utils.cloneDeep(this.opts);\r\n            // delete default values that will be recreated on launch\r\n            if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\r\n                o.margin = o.marginTop;\r\n                delete o.marginTop;\r\n                delete o.marginRight;\r\n                delete o.marginBottom;\r\n                delete o.marginLeft;\r\n            }\r\n            if (o.rtl === (this.el.style.direction === 'rtl')) {\r\n                o.rtl = 'auto';\r\n            }\r\n            if (this._isAutoCellHeight) {\r\n                o.cellHeight = 'auto';\r\n            }\r\n            if (this._autoColumn) {\r\n                o.column = 'auto';\r\n                delete o.disableOneColumnMode;\r\n            }\r\n            utils_1.Utils.removeInternalAndSame(o, GridDefaults);\r\n            o.children = list;\r\n            return o;\r\n        }\r\n        return list;\r\n    }\r\n    /**\r\n     * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\r\n     *\r\n     * @param layout list of widgets definition to update/create\r\n     * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\r\n     * the user control of insertion.\r\n     *\r\n     * @example\r\n     * see http://gridstackjs.com/demo/serialization.html\r\n     **/\r\n    load(layout, addAndRemove = true) {\r\n        let items = GridStack.Utils.sort([...layout], -1, this._prevColumn || this.getColumn()); // make copy before we mod/sort\r\n        this._insertNotAppend = true; // since create in reverse order...\r\n        // if we're loading a layout into 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save\r\n        // the original wanted layout so we can scale back up correctly #1471\r\n        if (this._prevColumn && this._prevColumn !== this.opts.column && items.some(n => (n.x + n.w) > this.opts.column)) {\r\n            this._ignoreLayoutsNodeChange = true; // skip layout update\r\n            this.engine.cacheLayout(items, this._prevColumn, true);\r\n        }\r\n        let removed = [];\r\n        this.batchUpdate();\r\n        // see if any items are missing from new layout and need to be removed first\r\n        if (addAndRemove) {\r\n            let copyNodes = [...this.engine.nodes]; // don't loop through array you modify\r\n            copyNodes.forEach(n => {\r\n                let item = items.find(w => n.id === w.id);\r\n                if (!item) {\r\n                    if (typeof (addAndRemove) === 'function') {\r\n                        addAndRemove(this, n, false);\r\n                    }\r\n                    else {\r\n                        removed.push(n); // batch keep track\r\n                        this.removeWidget(n.el, true, false);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        // now add/update the widgets\r\n        items.forEach(w => {\r\n            let item = (w.id || w.id === 0) ? this.engine.nodes.find(n => n.id === w.id) : undefined;\r\n            if (item) {\r\n                this.update(item.el, w);\r\n                if (w.subGrid && w.subGrid.children) { // update any sub grid as well\r\n                    let sub = item.el.querySelector('.grid-stack');\r\n                    if (sub && sub.gridstack) {\r\n                        sub.gridstack.load(w.subGrid.children); // TODO: support updating grid options ?\r\n                        this._insertNotAppend = true; // got reset by above call\r\n                    }\r\n                }\r\n            }\r\n            else if (addAndRemove) {\r\n                if (typeof (addAndRemove) === 'function') {\r\n                    w = addAndRemove(this, w, true).gridstackNode;\r\n                }\r\n                else {\r\n                    w = this.addWidget(w).gridstackNode;\r\n                }\r\n            }\r\n        });\r\n        this.engine.removedNodes = removed;\r\n        this.commit();\r\n        // after commit, clear that flag\r\n        delete this._ignoreLayoutsNodeChange;\r\n        delete this._insertNotAppend;\r\n        return this;\r\n    }\r\n    /**\r\n     * Initializes batch updates. You will see no changes until `commit()` method is called.\r\n     */\r\n    batchUpdate() {\r\n        this.engine.batchUpdate();\r\n        return this;\r\n    }\r\n    /**\r\n     * Gets current cell height.\r\n     */\r\n    getCellHeight(forcePixel = false) {\r\n        if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&\r\n            (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\r\n            return this.opts.cellHeight;\r\n        }\r\n        // else get first cell height\r\n        let el = this.el.querySelector('.' + this.opts.itemClass);\r\n        if (el) {\r\n            let height = utils_1.Utils.toNumber(el.getAttribute('gs-h'));\r\n            return Math.round(el.offsetHeight / height);\r\n        }\r\n        // else do entire grid and # of rows (but doesn't work if min-height is the actual constrain)\r\n        let rows = parseInt(this.el.getAttribute('gs-current-row'));\r\n        return rows ? Math.round(this.el.getBoundingClientRect().height / rows) : this.opts.cellHeight;\r\n    }\r\n    /**\r\n     * Update current cell height - see `GridStackOptions.cellHeight` for format.\r\n     * This method rebuilds an internal CSS style sheet.\r\n     * Note: You can expect performance issues if call this method too often.\r\n     *\r\n     * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),\r\n     * if pass 0 the CSS will be generated by the application instead.\r\n     * @param update (Optional) if false, styles will not be updated\r\n     *\r\n     * @example\r\n     * grid.cellHeight(100); // same as 100px\r\n     * grid.cellHeight('70px');\r\n     * grid.cellHeight(grid.cellWidth() * 1.2);\r\n     */\r\n    cellHeight(val, update = true) {\r\n        // if not called internally, check if we're changing mode\r\n        if (update && val !== undefined) {\r\n            if (this._isAutoCellHeight !== (val === 'auto')) {\r\n                this._isAutoCellHeight = (val === 'auto');\r\n                this._updateWindowResizeEvent();\r\n            }\r\n        }\r\n        if (val === 'initial' || val === 'auto') {\r\n            val = undefined;\r\n        }\r\n        // make item content be square\r\n        if (val === undefined) {\r\n            let marginDiff = -this.opts.marginRight - this.opts.marginLeft\r\n                + this.opts.marginTop + this.opts.marginBottom;\r\n            val = this.cellWidth() + marginDiff;\r\n        }\r\n        let data = utils_1.Utils.parseHeight(val);\r\n        if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\r\n            return this;\r\n        }\r\n        this.opts.cellHeightUnit = data.unit;\r\n        this.opts.cellHeight = data.h;\r\n        if (update) {\r\n            this._updateStyles(true, this.getRow()); // true = force re-create, for that # of rows\r\n        }\r\n        return this;\r\n    }\r\n    /** Gets current cell width. */\r\n    cellWidth() {\r\n        return this._widthOrContainer() / this.getColumn();\r\n    }\r\n    /** return our expected width (or parent) for 1 column check */\r\n    _widthOrContainer() {\r\n        // use `offsetWidth` or `clientWidth` (no scrollbar) ?\r\n        // https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\r\n        return (this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth);\r\n    }\r\n    /**\r\n     * Finishes batch updates. Updates DOM nodes. You must call it after batchUpdate.\r\n     */\r\n    commit() {\r\n        this.engine.commit();\r\n        this._triggerRemoveEvent();\r\n        this._triggerAddEvent();\r\n        this._triggerChangeEvent();\r\n        return this;\r\n    }\r\n    /** re-layout grid items to reclaim any empty space */\r\n    compact() {\r\n        this.engine.compact();\r\n        this._triggerChangeEvent();\r\n        return this;\r\n    }\r\n    /**\r\n     * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\r\n     * as well as cache the original layout so you can revert back to previous positions without loss.\r\n     * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\r\n     * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\r\n     * @param column - Integer > 0 (default 12).\r\n     * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n     * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n     */\r\n    column(column, layout = 'moveScale') {\r\n        if (column < 1 || this.opts.column === column)\r\n            return this;\r\n        let oldColumn = this.getColumn();\r\n        // if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)\r\n        // then remember the original columns so we can restore.\r\n        if (column === 1) {\r\n            this._prevColumn = oldColumn;\r\n        }\r\n        else {\r\n            delete this._prevColumn;\r\n        }\r\n        this.el.classList.remove('grid-stack-' + oldColumn);\r\n        this.el.classList.add('grid-stack-' + column);\r\n        this.opts.column = this.engine.column = column;\r\n        // update the items now - see if the dom order nodes should be passed instead (else default to current list)\r\n        let domNodes;\r\n        if (column === 1 && this.opts.oneColumnModeDomSort) {\r\n            domNodes = [];\r\n            this.getGridItems().forEach(el => {\r\n                if (el.gridstackNode) {\r\n                    domNodes.push(el.gridstackNode);\r\n                }\r\n            });\r\n            if (!domNodes.length) {\r\n                domNodes = undefined;\r\n            }\r\n        }\r\n        this.engine.updateNodeWidths(oldColumn, column, domNodes, layout);\r\n        if (this._isAutoCellHeight)\r\n            this.cellHeight();\r\n        // and trigger our event last...\r\n        this._ignoreLayoutsNodeChange = true; // skip layout update\r\n        this._triggerChangeEvent();\r\n        delete this._ignoreLayoutsNodeChange;\r\n        return this;\r\n    }\r\n    /**\r\n     * get the number of columns in the grid (default 12)\r\n     */\r\n    getColumn() {\r\n        return this.opts.column;\r\n    }\r\n    /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */\r\n    getGridItems() {\r\n        return Array.from(this.el.children)\r\n            .filter((el) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass));\r\n    }\r\n    /**\r\n     * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\r\n     * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\r\n     */\r\n    destroy(removeDOM = true) {\r\n        if (!this.el)\r\n            return; // prevent multiple calls\r\n        this._updateWindowResizeEvent(true);\r\n        this.setStatic(true, false); // permanently removes DD but don't set CSS class (we're going away)\r\n        this.setAnimation(false);\r\n        if (!removeDOM) {\r\n            this.removeAll(removeDOM);\r\n            this.el.classList.remove(this.opts._styleSheetClass);\r\n        }\r\n        else {\r\n            this.el.parentNode.removeChild(this.el);\r\n        }\r\n        this._removeStylesheet();\r\n        this.el.removeAttribute('gs-current-row');\r\n        delete this.opts._isNested;\r\n        delete this.opts;\r\n        delete this._placeholder;\r\n        delete this.engine;\r\n        delete this.el.gridstack; // remove circular dependency that would prevent a freeing\r\n        delete this.el;\r\n        return this;\r\n    }\r\n    /**\r\n     * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\r\n     */\r\n    float(val) {\r\n        this.engine.float = val;\r\n        this._triggerChangeEvent();\r\n        return this;\r\n    }\r\n    /**\r\n     * get the current float mode\r\n     */\r\n    getFloat() {\r\n        return this.engine.float;\r\n    }\r\n    /**\r\n     * Get the position of the cell under a pixel on screen.\r\n     * @param position the position of the pixel to resolve in\r\n     * absolute coordinates, as an object with top and left properties\r\n     * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\r\n     * Useful when grid is within `position: relative` element\r\n     *\r\n     * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\r\n     */\r\n    getCellFromPixel(position, useDocRelative = false) {\r\n        let box = this.el.getBoundingClientRect();\r\n        // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\r\n        let containerPos;\r\n        if (useDocRelative) {\r\n            containerPos = { top: box.top + document.documentElement.scrollTop, left: box.left };\r\n            // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\r\n        }\r\n        else {\r\n            containerPos = { top: this.el.offsetTop, left: this.el.offsetLeft };\r\n            // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\r\n        }\r\n        let relativeLeft = position.left - containerPos.left;\r\n        let relativeTop = position.top - containerPos.top;\r\n        let columnWidth = (box.width / this.getColumn());\r\n        let rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));\r\n        return { x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight) };\r\n    }\r\n    /** returns the current number of rows, which will be at least `minRow` if set */\r\n    getRow() {\r\n        return Math.max(this.engine.getRow(), this.opts.minRow);\r\n    }\r\n    /**\r\n     * Checks if specified area is empty.\r\n     * @param x the position x.\r\n     * @param y the position y.\r\n     * @param w the width of to check\r\n     * @param h the height of to check\r\n     */\r\n    isAreaEmpty(x, y, w, h) {\r\n        return this.engine.isAreaEmpty(x, y, w, h);\r\n    }\r\n    /**\r\n     * If you add elements to your grid by hand, you have to tell gridstack afterwards to make them widgets.\r\n     * If you want gridstack to add the elements for you, use `addWidget()` instead.\r\n     * Makes the given element a widget and returns it.\r\n     * @param els widget or single selector to convert.\r\n     *\r\n     * @example\r\n     * let grid = GridStack.init();\r\n     * grid.el.appendChild('<div id=\"gsi-1\" gs-w=\"3\"></div>');\r\n     * grid.makeWidget('#gsi-1');\r\n     */\r\n    makeWidget(els) {\r\n        let el = GridStack.getElement(els);\r\n        this._prepareElement(el, true);\r\n        this._updateContainerHeight();\r\n        this._triggerAddEvent();\r\n        this._triggerChangeEvent();\r\n        return el;\r\n    }\r\n    /**\r\n     * Event handler that extracts our CustomEvent data out automatically for receiving custom\r\n     * notifications (see doc for supported events)\r\n     * @param name of the event (see possible values) or list of names space separated\r\n     * @param callback function called with event and optional second/third param\r\n     * (see README documentation for each signature).\r\n     *\r\n     * @example\r\n     * grid.on('added', function(e, items) { log('added ', items)} );\r\n     * or\r\n     * grid.on('added removed change', function(e, items) { log(e.type, items)} );\r\n     *\r\n     * Note: in some cases it is the same as calling native handler and parsing the event.\r\n     * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\r\n     *\r\n     */\r\n    on(name, callback) {\r\n        // check for array of names being passed instead\r\n        if (name.indexOf(' ') !== -1) {\r\n            let names = name.split(' ');\r\n            names.forEach(name => this.on(name, callback));\r\n            return this;\r\n        }\r\n        if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n            // native CustomEvent handlers - cash the generic handlers so we can easily remove\r\n            let noData = (name === 'enable' || name === 'disable');\r\n            if (noData) {\r\n                this._gsEventHandler[name] = (event) => callback(event);\r\n            }\r\n            else {\r\n                this._gsEventHandler[name] = (event) => callback(event, event.detail);\r\n            }\r\n            this.el.addEventListener(name, this._gsEventHandler[name]);\r\n        }\r\n        else if (name === 'drag' || name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resize' || name === 'resizestop' || name === 'dropped') {\r\n            // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\r\n            // do same for start event to make it easier...\r\n            this._gsEventHandler[name] = callback;\r\n        }\r\n        else {\r\n            console.log('GridStack.on(' + name + ') event not supported, but you can still use $(\".grid-stack\").on(...) while jquery-ui is still used internally.');\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * unsubscribe from the 'on' event below\r\n     * @param name of the event (see possible values)\r\n     */\r\n    off(name) {\r\n        // check for array of names being passed instead\r\n        if (name.indexOf(' ') !== -1) {\r\n            let names = name.split(' ');\r\n            names.forEach(name => this.off(name));\r\n            return this;\r\n        }\r\n        if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n            // remove native CustomEvent handlers\r\n            if (this._gsEventHandler[name]) {\r\n                this.el.removeEventListener(name, this._gsEventHandler[name]);\r\n            }\r\n        }\r\n        delete this._gsEventHandler[name];\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes widget from the grid.\r\n     * @param el  widget or selector to modify\r\n     * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\r\n     * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n     */\r\n    removeWidget(els, removeDOM = true, triggerEvent = true) {\r\n        GridStack.getElements(els).forEach(el => {\r\n            if (el.parentElement !== this.el)\r\n                return; // not our child!\r\n            let node = el.gridstackNode;\r\n            // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\r\n            if (!node) {\r\n                node = this.engine.nodes.find(n => el === n.el);\r\n            }\r\n            if (!node)\r\n                return;\r\n            // remove our DOM data (circular link) and drag&drop permanently\r\n            delete el.gridstackNode;\r\n            gridstack_ddi_1.GridStackDDI.get().remove(el);\r\n            this.engine.removeNode(node, removeDOM, triggerEvent);\r\n            if (removeDOM && el.parentElement) {\r\n                el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\r\n            }\r\n        });\r\n        if (triggerEvent) {\r\n            this._triggerRemoveEvent();\r\n            this._triggerChangeEvent();\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes all widgets from the grid.\r\n     * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\r\n     */\r\n    removeAll(removeDOM = true) {\r\n        // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\r\n        this.engine.nodes.forEach(n => {\r\n            delete n.el.gridstackNode;\r\n            gridstack_ddi_1.GridStackDDI.get().remove(n.el);\r\n        });\r\n        this.engine.removeAll(removeDOM);\r\n        this._triggerRemoveEvent();\r\n        return this;\r\n    }\r\n    /**\r\n     * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\r\n     * @param doAnimate if true the grid will animate.\r\n     */\r\n    setAnimation(doAnimate) {\r\n        if (doAnimate) {\r\n            this.el.classList.add('grid-stack-animate');\r\n        }\r\n        else {\r\n            this.el.classList.remove('grid-stack-animate');\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\r\n     * Also toggle the grid-stack-static class.\r\n     * @param val if true the grid become static.\r\n     */\r\n    setStatic(val, updateClass = true) {\r\n        if (this.opts.staticGrid === val)\r\n            return this;\r\n        this.opts.staticGrid = val;\r\n        this._setupRemoveDrop();\r\n        this._setupAcceptWidget();\r\n        this.engine.nodes.forEach(n => this._prepareDragDropByNode(n)); // either delete or init Drag&drop\r\n        if (updateClass) {\r\n            this._setStaticClass();\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\r\n     * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\r\n     * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\r\n     */\r\n    update(els, opt) {\r\n        // support legacy call for now ?\r\n        if (arguments.length > 2) {\r\n            console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update(el, {x, w, content, ...})`. It will be removed soon');\r\n            // eslint-disable-next-line prefer-rest-params\r\n            let a = arguments, i = 1;\r\n            opt = { x: a[i++], y: a[i++], w: a[i++], h: a[i++] };\r\n            return this.update(els, opt);\r\n        }\r\n        GridStack.getElements(els).forEach(el => {\r\n            if (!el || !el.gridstackNode)\r\n                return;\r\n            let n = el.gridstackNode;\r\n            let w = utils_1.Utils.cloneDeep(opt); // make a copy we can modify in case they re-use it or multiple items\r\n            delete w.autoPosition;\r\n            // move/resize widget if anything changed\r\n            let keys = ['x', 'y', 'w', 'h'];\r\n            let m;\r\n            if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {\r\n                m = {};\r\n                keys.forEach(k => {\r\n                    m[k] = (w[k] !== undefined) ? w[k] : n[k];\r\n                    delete w[k];\r\n                });\r\n            }\r\n            // for a move as well IFF there is any min/max fields set\r\n            if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\r\n                m = {}; // will use node position but validate values\r\n            }\r\n            // check for content changing\r\n            if (w.content) {\r\n                let sub = el.querySelector('.grid-stack-item-content');\r\n                if (sub && sub.innerHTML !== w.content) {\r\n                    sub.innerHTML = w.content;\r\n                }\r\n                delete w.content;\r\n            }\r\n            // any remaining fields are assigned, but check for dragging changes, resize constrain\r\n            let changed = false;\r\n            let ddChanged = false;\r\n            for (const key in w) {\r\n                if (key[0] !== '_' && n[key] !== w[key]) {\r\n                    n[key] = w[key];\r\n                    changed = true;\r\n                    ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));\r\n                }\r\n            }\r\n            // finally move the widget\r\n            if (m) {\r\n                this.engine.cleanNodes()\r\n                    .beginUpdate(n)\r\n                    .moveNode(n, m);\r\n                this._updateContainerHeight();\r\n                this._triggerChangeEvent();\r\n                this.engine.endUpdate();\r\n            }\r\n            if (changed) { // move will only update x,y,w,h so update the rest too\r\n                this._writeAttr(el, n);\r\n            }\r\n            if (ddChanged) {\r\n                this._prepareDragDropByNode(n);\r\n            }\r\n        });\r\n        return this;\r\n    }\r\n    /**\r\n     * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\r\n     * @param value margin value\r\n     */\r\n    margin(value) {\r\n        let isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);\r\n        // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\r\n        if (!isMultiValue) {\r\n            let data = utils_1.Utils.parseHeight(value);\r\n            if (this.opts.marginUnit === data.unit && this.opts.margin === data.h)\r\n                return;\r\n        }\r\n        // re-use existing margin handling\r\n        this.opts.margin = value;\r\n        this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\r\n        this.initMargin();\r\n        this._updateStyles(true); // true = force re-create\r\n        return this;\r\n    }\r\n    /** returns current margin number value (undefined if 4 sides don't match) */\r\n    getMargin() { return this.opts.margin; }\r\n    /**\r\n     * Returns true if the height of the grid will be less than the vertical\r\n     * constraint. Always returns true if grid doesn't have height constraint.\r\n     * @param node contains x,y,w,h,auto-position options\r\n     *\r\n     * @example\r\n     * if (grid.willItFit(newWidget)) {\r\n     *   grid.addWidget(newWidget);\r\n     * } else {\r\n     *   alert('Not enough free space to place the widget');\r\n     * }\r\n     */\r\n    willItFit(node) {\r\n        // support legacy call for now\r\n        if (arguments.length > 1) {\r\n            console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon');\r\n            // eslint-disable-next-line prefer-rest-params\r\n            let a = arguments, i = 0, w = { x: a[i++], y: a[i++], w: a[i++], h: a[i++], autoPosition: a[i++] };\r\n            return this.willItFit(w);\r\n        }\r\n        return this.engine.willItFit(node);\r\n    }\r\n    /** @internal */\r\n    _triggerChangeEvent() {\r\n        if (this.engine.batchMode)\r\n            return this;\r\n        let elements = this.engine.getDirtyNodes(true); // verify they really changed\r\n        if (elements && elements.length) {\r\n            if (!this._ignoreLayoutsNodeChange) {\r\n                this.engine.layoutsNodesChange(elements);\r\n            }\r\n            this._triggerEvent('change', elements);\r\n        }\r\n        this.engine.saveInitial(); // we called, now reset initial values & dirty flags\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _triggerAddEvent() {\r\n        if (this.engine.batchMode)\r\n            return this;\r\n        if (this.engine.addedNodes && this.engine.addedNodes.length > 0) {\r\n            if (!this._ignoreLayoutsNodeChange) {\r\n                this.engine.layoutsNodesChange(this.engine.addedNodes);\r\n            }\r\n            // prevent added nodes from also triggering 'change' event (which is called next)\r\n            this.engine.addedNodes.forEach(n => { delete n._dirty; });\r\n            this._triggerEvent('added', this.engine.addedNodes);\r\n            this.engine.addedNodes = [];\r\n        }\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _triggerRemoveEvent() {\r\n        if (this.engine.batchMode)\r\n            return this;\r\n        if (this.engine.removedNodes && this.engine.removedNodes.length > 0) {\r\n            this._triggerEvent('removed', this.engine.removedNodes);\r\n            this.engine.removedNodes = [];\r\n        }\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _triggerEvent(name, data) {\r\n        let event = data ? new CustomEvent(name, { bubbles: false, detail: data }) : new Event(name);\r\n        this.el.dispatchEvent(event);\r\n        return this;\r\n    }\r\n    /** @internal called to delete the current dynamic style sheet used for our layout */\r\n    _removeStylesheet() {\r\n        if (this._styles) {\r\n            utils_1.Utils.removeStylesheet(this._styles._id);\r\n            delete this._styles;\r\n        }\r\n        return this;\r\n    }\r\n    /** @internal updated/create the CSS styles for row based layout and initial margin setting */\r\n    _updateStyles(forceUpdate = false, maxH) {\r\n        // call to delete existing one if we change cellHeight / margin\r\n        if (forceUpdate) {\r\n            this._removeStylesheet();\r\n        }\r\n        this._updateContainerHeight();\r\n        // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??\r\n        if (this.opts.cellHeight === 0) {\r\n            return this;\r\n        }\r\n        let cellHeight = this.opts.cellHeight;\r\n        let cellHeightUnit = this.opts.cellHeightUnit;\r\n        let prefix = `.${this.opts._styleSheetClass} > .${this.opts.itemClass}`;\r\n        // create one as needed\r\n        if (!this._styles) {\r\n            let id = 'gridstack-style-' + (Math.random() * 100000).toFixed();\r\n            // insert style to parent (instead of 'head' by default) to support WebComponent\r\n            let styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode;\r\n            this._styles = utils_1.Utils.createStylesheet(id, styleLocation);\r\n            if (!this._styles)\r\n                return this;\r\n            this._styles._id = id;\r\n            this._styles._max = 0;\r\n            // these are done once only\r\n            utils_1.Utils.addCSSRule(this._styles, prefix, `min-height: ${cellHeight}${cellHeightUnit}`);\r\n            // content margins\r\n            let top = this.opts.marginTop + this.opts.marginUnit;\r\n            let bottom = this.opts.marginBottom + this.opts.marginUnit;\r\n            let right = this.opts.marginRight + this.opts.marginUnit;\r\n            let left = this.opts.marginLeft + this.opts.marginUnit;\r\n            let content = `${prefix} > .grid-stack-item-content`;\r\n            let placeholder = `.${this.opts._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;\r\n            utils_1.Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n            utils_1.Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n            // resize handles offset (to match margin)\r\n            utils_1.Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);\r\n            utils_1.Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\r\n            utils_1.Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\r\n            utils_1.Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);\r\n            utils_1.Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\r\n            utils_1.Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\r\n        }\r\n        // now update the height specific fields\r\n        maxH = maxH || this._styles._max;\r\n        if (maxH > this._styles._max) {\r\n            let getHeight = (rows) => (cellHeight * rows) + cellHeightUnit;\r\n            for (let i = this._styles._max + 1; i <= maxH; i++) { // start at 1\r\n                let h = getHeight(i);\r\n                utils_1.Utils.addCSSRule(this._styles, `${prefix}[gs-y=\"${i - 1}\"]`, `top: ${getHeight(i - 1)}`); // start at 0\r\n                utils_1.Utils.addCSSRule(this._styles, `${prefix}[gs-h=\"${i}\"]`, `height: ${h}`);\r\n                utils_1.Utils.addCSSRule(this._styles, `${prefix}[gs-min-h=\"${i}\"]`, `min-height: ${h}`);\r\n                utils_1.Utils.addCSSRule(this._styles, `${prefix}[gs-max-h=\"${i}\"]`, `max-height: ${h}`);\r\n            }\r\n            this._styles._max = maxH;\r\n        }\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _updateContainerHeight() {\r\n        if (!this.engine || this.engine.batchMode)\r\n            return this;\r\n        let row = this.getRow() + this._extraDragRow; // checks for minRow already\r\n        // check for css min height\r\n        // Note: we don't handle %,rem correctly so comment out, beside we don't need need to create un-necessary\r\n        // rows as the CSS will make us bigger than our set height if needed... not sure why we had this.\r\n        // let cssMinHeight = parseInt(getComputedStyle(this.el)['min-height']);\r\n        // if (cssMinHeight > 0) {\r\n        //   let minRow = Math.round(cssMinHeight / this.getCellHeight(true));\r\n        //   if (row < minRow) {\r\n        //     row = minRow;\r\n        //   }\r\n        // }\r\n        this.el.setAttribute('gs-current-row', String(row));\r\n        if (row === 0) {\r\n            this.el.style.removeProperty('height');\r\n            return this;\r\n        }\r\n        let cellHeight = this.opts.cellHeight;\r\n        let unit = this.opts.cellHeightUnit;\r\n        if (!cellHeight)\r\n            return this;\r\n        this.el.style.height = row * cellHeight + unit;\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _prepareElement(el, triggerAddEvent = false, node) {\r\n        if (!node) {\r\n            el.classList.add(this.opts.itemClass);\r\n            node = this._readAttr(el);\r\n        }\r\n        el.gridstackNode = node;\r\n        node.el = el;\r\n        node.grid = this;\r\n        let copy = Object.assign({}, node);\r\n        node = this.engine.addNode(node, triggerAddEvent);\r\n        // write node attr back in case there was collision or we have to fix bad values during addNode()\r\n        if (!utils_1.Utils.same(node, copy)) {\r\n            this._writeAttr(el, node);\r\n        }\r\n        this._prepareDragDropByNode(node);\r\n        return this;\r\n    }\r\n    /** @internal call to write position x,y,w,h attributes back to element */\r\n    _writePosAttr(el, n) {\r\n        if (n.x !== undefined && n.x !== null) {\r\n            el.setAttribute('gs-x', String(n.x));\r\n        }\r\n        if (n.y !== undefined && n.y !== null) {\r\n            el.setAttribute('gs-y', String(n.y));\r\n        }\r\n        if (n.w) {\r\n            el.setAttribute('gs-w', String(n.w));\r\n        }\r\n        if (n.h) {\r\n            el.setAttribute('gs-h', String(n.h));\r\n        }\r\n        return this;\r\n    }\r\n    /** @internal call to write any default attributes back to element */\r\n    _writeAttr(el, node) {\r\n        if (!node)\r\n            return this;\r\n        this._writePosAttr(el, node);\r\n        let attrs /*: GridStackWidget but strings */ = {\r\n            autoPosition: 'gs-auto-position',\r\n            minW: 'gs-min-w',\r\n            minH: 'gs-min-h',\r\n            maxW: 'gs-max-w',\r\n            maxH: 'gs-max-h',\r\n            noResize: 'gs-no-resize',\r\n            noMove: 'gs-no-move',\r\n            locked: 'gs-locked',\r\n            id: 'gs-id',\r\n            resizeHandles: 'gs-resize-handles'\r\n        };\r\n        for (const key in attrs) {\r\n            if (node[key]) { // 0 is valid for x,y only but done above already and not in list anyway\r\n                el.setAttribute(attrs[key], String(node[key]));\r\n            }\r\n            else {\r\n                el.removeAttribute(attrs[key]);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /** @internal call to read any default attributes from element */\r\n    _readAttr(el) {\r\n        let node = {};\r\n        node.x = utils_1.Utils.toNumber(el.getAttribute('gs-x'));\r\n        node.y = utils_1.Utils.toNumber(el.getAttribute('gs-y'));\r\n        node.w = utils_1.Utils.toNumber(el.getAttribute('gs-w'));\r\n        node.h = utils_1.Utils.toNumber(el.getAttribute('gs-h'));\r\n        node.maxW = utils_1.Utils.toNumber(el.getAttribute('gs-max-w'));\r\n        node.minW = utils_1.Utils.toNumber(el.getAttribute('gs-min-w'));\r\n        node.maxH = utils_1.Utils.toNumber(el.getAttribute('gs-max-h'));\r\n        node.minH = utils_1.Utils.toNumber(el.getAttribute('gs-min-h'));\r\n        node.autoPosition = utils_1.Utils.toBool(el.getAttribute('gs-auto-position'));\r\n        node.noResize = utils_1.Utils.toBool(el.getAttribute('gs-no-resize'));\r\n        node.noMove = utils_1.Utils.toBool(el.getAttribute('gs-no-move'));\r\n        node.locked = utils_1.Utils.toBool(el.getAttribute('gs-locked'));\r\n        node.resizeHandles = el.getAttribute('gs-resize-handles');\r\n        node.id = el.getAttribute('gs-id');\r\n        // remove any key not found (null or false which is default)\r\n        for (const key in node) {\r\n            if (!node.hasOwnProperty(key))\r\n                return;\r\n            if (!node[key] && node[key] !== 0) { // 0 can be valid value (x,y only really)\r\n                delete node[key];\r\n            }\r\n        }\r\n        return node;\r\n    }\r\n    /** @internal */\r\n    _setStaticClass() {\r\n        let classes = ['grid-stack-static'];\r\n        if (this.opts.staticGrid) {\r\n            this.el.classList.add(...classes);\r\n            this.el.setAttribute('gs-static', 'true');\r\n        }\r\n        else {\r\n            this.el.classList.remove(...classes);\r\n            this.el.removeAttribute('gs-static');\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * called when we are being resized by the window - check if the one Column Mode needs to be turned on/off\r\n     * and remember the prev columns we used, or get our count from parent, as well as check for auto cell height (square)\r\n     */\r\n    onParentResize() {\r\n        if (!this.el || !this.el.clientWidth)\r\n            return; // return if we're gone or no size yet (will get called again)\r\n        let changedColumn = false;\r\n        // see if we're nested and take our column count from our parent....\r\n        if (this._autoColumn && this.opts._isNested) {\r\n            if (this.opts.column !== this.opts._isNested.w) {\r\n                changedColumn = true;\r\n                this.column(this.opts._isNested.w, 'none');\r\n            }\r\n        }\r\n        else {\r\n            // else check for 1 column in/out behavior\r\n            let oneColumn = !this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.minWidth;\r\n            if ((this.opts.column === 1) !== oneColumn) {\r\n                changedColumn = true;\r\n                if (this.opts.animate) {\r\n                    this.setAnimation(false);\r\n                } // 1 <-> 12 is too radical, turn off animation\r\n                this.column(oneColumn ? 1 : this._prevColumn);\r\n                if (this.opts.animate) {\r\n                    this.setAnimation(true);\r\n                }\r\n            }\r\n        }\r\n        // make the cells content square again\r\n        if (this._isAutoCellHeight) {\r\n            if (!changedColumn && this.opts.cellHeightThrottle) {\r\n                if (!this._cellHeightThrottle) {\r\n                    this._cellHeightThrottle = utils_1.Utils.throttle(() => this.cellHeight(), this.opts.cellHeightThrottle);\r\n                }\r\n                this._cellHeightThrottle();\r\n            }\r\n            else {\r\n                // immediate update if we've changed column count or have no threshold\r\n                this.cellHeight();\r\n            }\r\n        }\r\n        // finally update any nested grids\r\n        this.engine.nodes.forEach(n => {\r\n            if (n.subGrid) {\r\n                n.subGrid.onParentResize();\r\n            }\r\n        });\r\n        return this;\r\n    }\r\n    /** add or remove the window size event handler */\r\n    _updateWindowResizeEvent(forceRemove = false) {\r\n        // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)\r\n        const workTodo = (this._isAutoCellHeight || !this.opts.disableOneColumnMode) && !this.opts._isNested;\r\n        if (!forceRemove && workTodo && !this._windowResizeBind) {\r\n            this._windowResizeBind = this.onParentResize.bind(this); // so we can properly remove later\r\n            window.addEventListener('resize', this._windowResizeBind);\r\n        }\r\n        else if ((forceRemove || !workTodo) && this._windowResizeBind) {\r\n            window.removeEventListener('resize', this._windowResizeBind);\r\n            delete this._windowResizeBind; // remove link to us so we can free\r\n        }\r\n        return this;\r\n    }\r\n    /** @internal convert a potential selector into actual element */\r\n    static getElement(els = '.grid-stack-item') { return utils_1.Utils.getElement(els); }\r\n    /** @internal */\r\n    static getElements(els = '.grid-stack-item') { return utils_1.Utils.getElements(els); }\r\n    /** @internal */\r\n    static getGridElement(els) { return GridStack.getElement(els); }\r\n    /** @internal */\r\n    static getGridElements(els) { return utils_1.Utils.getElements(els); }\r\n    /** @internal initialize margin top/bottom/left/right and units */\r\n    initMargin() {\r\n        let data;\r\n        let margin = 0;\r\n        // support passing multiple values like CSS (ex: '5px 10px 0 20px')\r\n        let margins = [];\r\n        if (typeof this.opts.margin === 'string') {\r\n            margins = this.opts.margin.split(' ');\r\n        }\r\n        if (margins.length === 2) { // top/bot, left/right like CSS\r\n            this.opts.marginTop = this.opts.marginBottom = margins[0];\r\n            this.opts.marginLeft = this.opts.marginRight = margins[1];\r\n        }\r\n        else if (margins.length === 4) { // Clockwise like CSS\r\n            this.opts.marginTop = margins[0];\r\n            this.opts.marginRight = margins[1];\r\n            this.opts.marginBottom = margins[2];\r\n            this.opts.marginLeft = margins[3];\r\n        }\r\n        else {\r\n            data = utils_1.Utils.parseHeight(this.opts.margin);\r\n            this.opts.marginUnit = data.unit;\r\n            margin = this.opts.margin = data.h;\r\n        }\r\n        // see if top/bottom/left/right need to be set as well\r\n        if (this.opts.marginTop === undefined) {\r\n            this.opts.marginTop = margin;\r\n        }\r\n        else {\r\n            data = utils_1.Utils.parseHeight(this.opts.marginTop);\r\n            this.opts.marginTop = data.h;\r\n            delete this.opts.margin;\r\n        }\r\n        if (this.opts.marginBottom === undefined) {\r\n            this.opts.marginBottom = margin;\r\n        }\r\n        else {\r\n            data = utils_1.Utils.parseHeight(this.opts.marginBottom);\r\n            this.opts.marginBottom = data.h;\r\n            delete this.opts.margin;\r\n        }\r\n        if (this.opts.marginRight === undefined) {\r\n            this.opts.marginRight = margin;\r\n        }\r\n        else {\r\n            data = utils_1.Utils.parseHeight(this.opts.marginRight);\r\n            this.opts.marginRight = data.h;\r\n            delete this.opts.margin;\r\n        }\r\n        if (this.opts.marginLeft === undefined) {\r\n            this.opts.marginLeft = margin;\r\n        }\r\n        else {\r\n            data = utils_1.Utils.parseHeight(this.opts.marginLeft);\r\n            this.opts.marginLeft = data.h;\r\n            delete this.opts.margin;\r\n        }\r\n        this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\r\n        if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\r\n            this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\r\n        }\r\n        return this;\r\n    }\r\n    /*\r\n     * drag&drop empty stubs that will be implemented in gridstack-dd.ts for non static grid\r\n     * so we don't incur the load unless needed.\r\n     * NOTE: had to make those methods public in order to define them else as\r\n     *   GridStack.prototype._setupAcceptWidget = function()\r\n     * maybe there is a better way ????\r\n     */\r\n    /* eslint-disable @typescript-eslint/no-unused-vars */\r\n    /**\r\n     * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n     * Called during GridStack.init() as options, but can also be called directly (last param are cached) in case the toolbar\r\n     * is dynamically create and needs to change later.\r\n     * @param dragIn string selector (ex: '.sidebar .grid-stack-item')\r\n     * @param dragInOptions options - see DDDragInOpt. (default: {revert: 'invalid', handle: '.grid-stack-item-content', scroll: false, appendTo: 'body'}\r\n     **/\r\n    static setupDragIn(dragIn, dragInOptions) { }\r\n    /**\r\n     * Enables/Disables dragging by the user of specific grid element. If you want all items, and have it affect future items, use enableMove() instead. No-op for static grids.\r\n     * IF you are looking to prevent an item from moving (due to being pushed around by another during collision) use locked property instead.\r\n     * @param els widget or selector to modify.\r\n     * @param val if true widget will be draggable.\r\n     */\r\n    movable(els, val) { return this; }\r\n    /**\r\n     * Enables/Disables user resizing of specific grid element. If you want all items, and have it affect future items, use enableResize() instead. No-op for static grids.\r\n     * @param els  widget or selector to modify\r\n     * @param val  if true widget will be resizable.\r\n     */\r\n    resizable(els, val) { return this; }\r\n    /**\r\n     * Temporarily disables widgets moving/resizing.\r\n     * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n     * Note: no-op for static grid\r\n     * This is a shortcut for:\r\n     * @example\r\n     *  grid.enableMove(false);\r\n     *  grid.enableResize(false);\r\n     */\r\n    disable() { return this; }\r\n    /**\r\n     * Re-enables widgets moving/resizing - see disable().\r\n     * Note: no-op for static grid.\r\n     * This is a shortcut for:\r\n     * @example\r\n     *  grid.enableMove(true);\r\n     *  grid.enableResize(true);\r\n     */\r\n    enable() { return this; }\r\n    /**\r\n     * Enables/disables widget moving. No-op for static grids.\r\n     */\r\n    enableMove(doEnable) { return this; }\r\n    /**\r\n     * Enables/disables widget resizing. No-op for static grids.\r\n     */\r\n    enableResize(doEnable) { return this; }\r\n    /** @internal called to add drag over support to support widgets */\r\n    _setupAcceptWidget() { return this; }\r\n    /** @internal called to setup a trash drop zone if the user specifies it */\r\n    _setupRemoveDrop() { return this; }\r\n    /** @internal prepares the element for drag&drop **/\r\n    _prepareDragDropByNode(node) { return this; }\r\n    /** @internal handles actual drag/resize start **/\r\n    _onStartMoving(el, event, ui, node, cellWidth, cellHeight) { return; }\r\n    /** @internal handles actual drag/resize **/\r\n    _dragOrResize(el, event, ui, node, cellWidth, cellHeight) { return; }\r\n    /** @internal called when a node leaves our area (mouse out or shape outside) **/\r\n    _leave(el, helper) { return; }\r\n}\r\nexports.GridStack = GridStack;\r\n/** scoping so users can call GridStack.Utils.sort() for example */\r\nGridStack.Utils = utils_1.Utils;\r\n/** scoping so users can call new GridStack.Engine(12) for example */\r\nGridStack.Engine = gridstack_engine_1.GridStackEngine;\r\n//# sourceMappingURL=gridstack.js.map","\"use strict\";\r\n/**\r\n * types.ts 5.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//# sourceMappingURL=types.js.map"],"sourceRoot":""}