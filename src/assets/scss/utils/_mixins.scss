@charset "UTF-8";

/**
    실제 css class를 만들어주는 mixin.
    
    ex>
    m-0 : { margin : 0; }
    mt-5 : { margin-top : 5px; }
*/
@mixin generate($nameMap : (), $position : (), $size : ()) {

    @each $preKey,
    $preValue in $nameMap {
        @each $px in $size {
            .#{$preKey}-#{$px} {
                #{$preValue}: getPx($px) !important;
            }

            @each $sufKey,
            $sufValue in $position {
                .#{$preKey}#{$sufKey}-#{$px} {
                    #{$preValue}-#{$sufValue}: getPx($px) !important;
                }
            }
        }
    }
}

/**
    font-size를 실제로 만들어 주는 mixin.
*/
@mixin fontGenerate($fontSize: ()) {

    @each $px in $fontSize {
        .font#{$px} {
            font-size: rem(getPx($px)) !important;
        }
    }
}


/**
    margin, padding 값을 만들어 주는 mixin.
    @param {Arglist} $kind-values  margin or padding 넣을 속성 값
*/
@mixin mar($kind-values...) {
    
    @each $kind-value in $kind-values {
        @include make-kinds(nth($kind-value, 1),nth($kind-value, 2));
    };
}

/**
    margin, padding 값을 만들어 주는 mixin.
    @param {Arglist} $kind-values  margin or padding 넣을 속성 값
*/
@mixin pad($kind-values...) {

    @each $kind-value in $kind-values {
        @include make-kinds(nth($kind-value, 1), nth($kind-value, 2));
    }
}

/**
    @param {String} $kind  margin or padding 속성(m = margin, p = padding, mt = margin-top...)
    @param {Number} $px    margin or padding 값
*/
@mixin make-kinds($kind, $px) {
    $kindsMap: ('m':'margin', 'mt':'margin-top', 'mr':'margin-right', 'mb':'margin-bottom', 'ml':'margin-left', 'p':'padding', 'pt':'padding-top', 'pr':'padding-right', 'pb':'padding-bottom', 'pl':'padding-left', );


    @if type-of($px)==number {
        #{map-get($kindsMap, $kind)}: getPx($px);
    }

    @else {
        #{map-get($kindsMap, $kind)}: $px;
    }
}

/**
    text-overflow 생성 mixon
    @param {Number} $line 라인 수
*/
@mixin textOverflow($line) {
    @if $line>1 {
        display: -webkit-box;
        -webkit-line-clamp: $line;
        -webkit-box-orient: vertical;

    }

    @else {
        white-space: nowrap;
    }

    overflow: hidden;
    text-overflow: ellipsis;
}

/**
    overflow 생성 mixon
    @param {String} $value 속성 값
    @param {String} $dir   x,y 값
*/
@mixin overflow($value, $dir: null) {
    @if $dir {
        overflow-#{$dir}: $value
    }

    @else {
        overflow: $value
    }
}

/**
    border 생성 mixin.
    @param {String} $dir border 방향, 없을경우 전체
    @param {String} $border... border map, 실제 border 값 입력

    ex) 'l', 1px solid #000  or  '', 1px solid #000, 2px solid #333;
*/
@mixin border($dir : false, $border...) {
    $dirs: ('t':'top', 'r':'right', 'b':'bottom', 'l':'left');
    $args: length($border);
    $borders: false;
    $border-top: false;
    $border-right: false;
    $border-bottom: false;
    $border-left: false;

    @if $args==4 {
        $border-top: nth($border, 1);
        $border-right: nth($border, 2);
        $border-bottom: nth($border, 3);
        $border-left: nth($border, 4);
    }

    @else if $args==3 {
        $border-top: nth($border, 1);
        $border-right: nth($border, 2);
        $border-bottom: nth($border, 3);
    }

    @else if $args==2 {
        $border-top: nth($border, 1);
        $border-right: nth($border, 2);
    }

    @else if $args==1 {
        $borders: nth($border, 1);
    }

    @if $border-top and $border-right and $border-bottom and $border-left {
        border-top: $border-top;
        border-right: $border-right;
        border-bottom: $border-bottom;
        border-left: $border-left;
    }

    @else if $border-top and $border-right and $border-bottom {
        border-top: $border-top;
        border-right: $border-right;
        border-bottom: $border-bottom;
    }

    @else if $border-top and $border-right {
        border-top: $border-top;
        border-right: $border-right;
    }

    @else if $borders {
        @if str-length($dir)>0 {
            border-#{map-get($dirs, $dir)}: $border;
        }

        @else {
            border: $border;
        }
    }
}

/**
    prefix 생성 mixin
    @param {String} $property css 속성명
    @param {String} $value    css 속성값
*/
@mixin prefix($property, $value) {
    $prefixes: webkit, moz, ms, o;

    @each $prefix in $prefixes {
        #{'-' + $prefix + '-' + $property}: $value;
    }

    // 기본
    #{$property}: $value;
}

/**
    position 생성 mixin
    @param {String} $position position 속성 값
    @param {String} $top      top 속성값
    @param {String} $right    right 속성값
    @param {String} $bottom   bottom 속성값
    @param {String} $left     left 속성값
*/
@mixin position($position, $top: null, $right: null, $bottom: null, $left: null) {
    position: $position;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
}

/**
    box-shadow 생성 mixin.
    @param {Arglist} $args shadow값.
    ex) 2px 2px 0px #000000, inset 1px 1px 0px #ffffff
*/
@mixin box-shadow($args...) {
    box-shadow: $args;
}

/**
    arrow 생성 mixin.
    @param {String} $width 화살표 width 값
    @param {String} $height 화살표 height 값
    @param {String} $dir 화살표 위치(top, bot)
    @param {String} $bdColor 화살표 border 컬러
    @param {String} $conColor 화살표 내부 컬러
    @param {String} $right 화살표 right 값
    @param {String} $left 화살표 left 값
    ex)
*/
@mixin arrow-creat($width, $height, $dir, $bdColor, $conColor, $right: null, $left: null, $top: null) {
    $defaultPosition: 0px !default;

    @if ($top) {
        $defaultPosition: $top + 0px;
    }

    &::before,
    &::after {
        content: '';
        display: block;
        position: absolute;

    }

    &::before {
        @if $left {
            left: $left;
            right: auto;
        }

        @else if $right {
            left: auto;
            right: $right;
        }
    }

    &::after {
        @if $left {
            left: $left + 1px;
            right: auto;
        }

        @else if $right {
            left: auto;
            right: $right + 1px;
        }
    }

    @if $dir=='top' {
        &::before {
            top: $defaultPosition;
            bottom: auto;
            border-top: none;
            border-right: ($width / 2) solid transparent;
            border-bottom: $height solid $bdColor;
            border-left: ($width / 2) solid transparent;
        }

        &::after {
            top: $defaultPosition + 1px;
            bottom: auto;
            border-top: none;
            border-right: ($width / 2 - 1px) solid transparent;
            border-bottom: ($height - 1px) solid $conColor;
            border-left: ($width / 2 - 1px) solid transparent;
        }
    }

    @else if $dir=='bot' {
        &::before {
            top: auto;
            bottom: $defaultPosition;
            border-top: $height solid $bdColor;
            ;
            border-right: ($width / 2) solid transparent;
            border-bottom: none;
            border-left: ($width / 2) solid transparent;
        }

        &::after {
            top: auto;
            bottom: $defaultPosition + 1px;
            border-top: ($height - 1px) solid $conColor;
            border-right: ($width / 2 - 1px) solid transparent;
            border-bottom: none;
            border-left: ($width / 2 - 1px) solid transparent;
        }
    }
}
